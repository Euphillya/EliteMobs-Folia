From 8ebf681d6128680c852b0ab29f173f77ad917231 Mon Sep 17 00:00:00 2001
From: Euphyllia Bierque <bierque.euphyllia@gmail.com>
Date: Mon, 19 Aug 2024 14:21:43 +0200
Subject: [PATCH 5/9] Replace all schedulers

---
 .../java/com/magmaguy/elitemobs/CrashFix.java | 31 +++++++-----
 .../elitemobs/adventurersguild/GuildRank.java |  5 +-
 .../elitemobs/api/EliteExplosionEvent.java    |  5 +-
 .../api/EliteMobDamagedByPlayerEvent.java     |  2 +-
 .../api/EliteMobEnterCombatEvent.java         |  9 ++--
 .../elitemobs/api/PlayerPreTeleportEvent.java |  5 +-
 .../KeepNeutralsAngry.java                    |  5 +-
 .../combatsystem/combattag/CombatTag.java     |  5 +-
 .../combatsystem/displays/PopupDisplay.java   |  9 ++--
 .../config/ConfigurationExporter.java         |  6 ++-
 .../TranslationsConfigFields.java             |  2 +-
 .../entitytracker/CustomProjectileData.java   |  9 ++--
 .../entitytracker/EntityTracker.java          |  5 +-
 .../elitemobs/events/ActionEvent.java         |  2 +-
 .../elitemobs/events/CustomEvent.java         | 10 ++--
 .../magmaguy/elitemobs/events/TimedEvent.java |  9 ++--
 .../elitemobs/explosionregen/Explosion.java   |  5 +-
 .../initialsetup/FirstTimeSetup.java          |  5 +-
 .../instanced/InstanceDeathLocation.java      |  6 ++-
 .../instanced/InstancePlayerManager.java      |  6 ++-
 .../elitemobs/instanced/MatchInstance.java    | 21 +++++++--
 .../instanced/arena/ArenaInstance.java        | 13 +++--
 .../instanced/dungeons/DungeonInstance.java   | 35 ++++++++------
 .../dungeons/EnchantmentDungeonInstance.java  | 10 ++--
 .../elitemobs/items/ItemLootShower.java       | 21 +++++----
 .../magmaguy/elitemobs/items/LootTables.java  |  5 +-
 .../elitemobs/items/RareDropEffect.java       |  5 +-
 .../EarthquakeEnchantment.java                |  8 ++--
 .../FlamethrowerEnchantment.java              | 13 ++---
 .../GrapplingHookEnchantment.java             |  9 ++--
 .../LightningEnchantment.java                 |  2 +-
 .../MeteorShowerEnchantment.java              |  5 +-
 .../PlasmaBootsEnchantment.java               | 13 ++---
 .../SoulbindEnchantment.java                  |  9 ++--
 .../SummonMerchantEnchantment.java            | 13 ++---
 .../SummonWolfEnchantment.java                |  5 +-
 .../customloottable/SharedLootTable.java      | 11 +++--
 .../potioneffects/PlayerPotionEffects.java    | 22 +++++----
 .../elitemobs/menus/CustomShopMenu.java       |  5 +-
 .../elitemobs/menus/ProceduralShopMenu.java   |  5 +-
 .../elitemobs/menus/SharedShopElements.java   | 10 ++--
 .../elitemobs/mobconstructor/CustomSpawn.java | 20 ++++----
 .../elitemobs/mobconstructor/EliteEntity.java | 17 +++----
 .../PersistentObjectHandler.java              |  2 +-
 .../custombosses/CustomBossBossBar.java       |  8 ++--
 .../custombosses/CustomBossEntity.java        | 14 +++---
 .../CustomBossEscapeMechanism.java            | 11 +++--
 .../custombosses/CustomBossMount.java         |  5 +-
 .../custombosses/CustomBossTrail.java         | 18 +++----
 .../custombosses/CustomMusic.java             | 26 +++++-----
 .../custombosses/RegionalBossEntity.java      | 19 ++++----
 .../magmaguy/elitemobs/npcs/NPCEntity.java    |  9 ++--
 .../elitemobs/npcs/NPCInteractions.java       | 47 ++++++++++---------
 .../elitemobs/npcs/chatter/NPCChatBubble.java |  5 +-
 .../npcs/chatter/NPCProximitySensor.java      |  9 ++--
 .../elitemobs/pathfinding/Navigation.java     | 10 ++--
 .../playerdata/ElitePlayerInventory.java      |  2 +-
 .../playerdata/database/PlayerData.java       | 18 +++----
 .../elitemobs/powers/ArrowFireworks.java      |  5 +-
 .../magmaguy/elitemobs/powers/ArrowRain.java  |  5 +-
 .../elitemobs/powers/AttackArrow.java         |  5 +-
 .../elitemobs/powers/AttackFireball.java      |  5 +-
 .../elitemobs/powers/AttackLightning.java     |  6 ++-
 .../magmaguy/elitemobs/powers/BulletHell.java |  9 ++--
 .../elitemobs/powers/ChannelHealing.java      |  9 ++--
 .../magmaguy/elitemobs/powers/DeathSlice.java |  5 +-
 .../powers/EnderDragonArrowBombardment.java   |  5 +-
 .../powers/EnderDragonDiscoFireballs.java     |  9 ++--
 .../powers/EnderDragonEmpoweredLightning.java | 14 +++---
 .../powers/EnderDragonShockwave.java          |  9 ++--
 .../elitemobs/powers/EnderDragonTornado.java  |  9 ++--
 .../magmaguy/elitemobs/powers/Firestorm.java  | 21 +++++----
 .../elitemobs/powers/FireworksBarrage.java    |  9 ++--
 .../magmaguy/elitemobs/powers/FlamePyre.java  | 17 +++----
 .../elitemobs/powers/Flamethrower.java        | 13 ++---
 .../magmaguy/elitemobs/powers/FrostCone.java  | 11 +++--
 .../elitemobs/powers/FrostWalker.java         |  5 +-
 .../elitemobs/powers/GoldExplosion.java       |  5 +-
 .../elitemobs/powers/GoldShotgun.java         |  5 +-
 .../elitemobs/powers/GroundPound.java         | 13 ++---
 .../magmaguy/elitemobs/powers/Implosion.java  |  5 +-
 .../powers/InvulnerabilityKnockback.java      |  5 +-
 .../elitemobs/powers/LightningBolts.java      | 10 ++--
 .../elitemobs/powers/MeteorShower.java        |  5 +-
 .../elitemobs/powers/MovementSpeed.java       |  5 +-
 .../magmaguy/elitemobs/powers/PhotonRay.java  |  9 ++--
 .../elitemobs/powers/PlasmaBlaster.java       |  9 ++--
 .../elitemobs/powers/ProjectileDamage.java    |  5 +-
 .../magmaguy/elitemobs/powers/ShieldWall.java |  4 +-
 .../elitemobs/powers/SkeletonPillar.java      | 10 ++--
 .../powers/SkeletonTrackingArrow.java         |  9 ++--
 .../magmaguy/elitemobs/powers/SpiritWalk.java | 21 +++++----
 .../elitemobs/powers/SummonEmbers.java        |  5 +-
 .../elitemobs/powers/SummonTheReturned.java   |  5 +-
 .../com/magmaguy/elitemobs/powers/Taunt.java  |  5 +-
 .../com/magmaguy/elitemobs/powers/Taze.java   |  5 +-
 .../elitemobs/powers/Thunderstorm.java        | 10 ++--
 .../elitemobs/powers/TrackingFireball.java    |  9 ++--
 .../elitemobs/powers/ZombieBloat.java         | 14 +++---
 .../elitemobs/powers/ZombieFriends.java       |  9 ++--
 .../elitemobs/powers/ZombieNecronomicon.java  | 13 ++---
 .../elitemobs/powers/ZombieParents.java       |  9 ++--
 .../elitemobs/powers/meta/Bombardment.java    | 12 +++--
 .../powers/meta/CombatEnterScanPower.java     |  3 +-
 .../powers/meta/CustomSummonPower.java        |  8 ++--
 .../elitemobs/powers/meta/ElitePower.java     | 18 +++----
 .../elitemobs/powers/meta/PowerCooldown.java  |  5 +-
 .../powers/scripts/ScriptAction.java          | 37 ++++++++-------
 .../elitemobs/powers/scripts/ScriptZone.java  |  6 ++-
 .../EnderCrystalLightningRod.java             |  5 +-
 .../powerstances/VisualItemProcessor.java     |  9 ++--
 .../powerstances/VisualItemRemover.java       |  5 +-
 .../elitemobs/quests/DynamicQuest.java        |  9 ++--
 .../quests/QuestInteractionHandler.java       |  5 +-
 .../elitemobs/quests/QuestTracking.java       | 21 +++++----
 .../objectives/CustomFetchObjective.java      |  5 +-
 .../quests/playercooldowns/QuestCooldown.java |  8 ++--
 .../treasurechest/TreasureChest.java          |  9 ++--
 .../elitemobs/utils/CooldownHandler.java      |  5 +-
 .../elitemobs/utils/DialogArmorStand.java     |  8 ++--
 .../magmaguy/elitemobs/utils/ServerTime.java  |  2 +-
 .../elitemobs/utils/SimpleScoreboard.java     |  4 +-
 .../elitemobs/utils/StringColorAnimator.java  |  4 +-
 .../elitemobs/utils/shapes/RotatingRay.java   |  6 ++-
 .../utils/shapes/TranslatingRay.java          |  6 ++-
 .../versionnotifier/VersionChecker.java       | 11 +++--
 .../elitemobs/wormhole/WormholeEntry.java     |  3 +-
 .../elitemobs/wormhole/WormholeTask.java      | 19 ++++----
 128 files changed, 703 insertions(+), 526 deletions(-)

diff --git a/src/main/java/com/magmaguy/elitemobs/CrashFix.java b/src/main/java/com/magmaguy/elitemobs/CrashFix.java
index 978d7bb9..1ee4ec22 100644
--- a/src/main/java/com/magmaguy/elitemobs/CrashFix.java
+++ b/src/main/java/com/magmaguy/elitemobs/CrashFix.java
@@ -1,6 +1,7 @@
 package com.magmaguy.elitemobs;
 
 import com.magmaguy.elitemobs.utils.ChunkVectorizer;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.PersistentVanillaData;
 import org.bukkit.Bukkit;
 import org.bukkit.Chunk;
@@ -40,15 +41,20 @@ public class CrashFix implements Listener {
     public static void startupCheck() {
         for (World world : Bukkit.getWorlds())
             for (Chunk chunk : world.getLoadedChunks()) {
-                chunkCheck(chunk);
-                knownSessionChunks.add(ChunkVectorizer.hash(chunk));
+                Bukkit.getRegionScheduler().execute(MetadataHandler.PLUGIN, chunk.getWorld(), chunk.getX(), chunk.getZ(), () -> {
+                    chunkCheck(chunk);
+                    knownSessionChunks.add(ChunkVectorizer.hash(chunk));
+                });
             }
     }
 
     private static void chunkCheck(Chunk chunk) {
-        for (Entity entity : chunk.getEntities())
-            if (isPersistentEntity(entity))
-                entity.remove();
+        for (Entity entity : chunk.getEntities()) {
+            entity.getScheduler().run(MetadataHandler.PLUGIN, scheduledTask -> {
+                if (isPersistentEntity(entity))
+                    entity.remove();
+            }, null);
+        }
     }
 
     /**
@@ -62,16 +68,19 @@ public class CrashFix implements Listener {
      * @param chunk
      */
     private static void delayedChunkCheck(Chunk chunk, int hashedChunk) {
-        Entity[] entities = chunk.getEntities().clone();
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getRegionScheduler(), chunk.getWorld(), chunk.getX(), chunk.getZ()) {
             @Override
             public void run() {
-                for (Entity entity : entities)
-                    if (isPersistentEntity(entity))
-                        entity.remove();
+                Entity[] entities = chunk.getEntities().clone();
+                for (Entity entity : entities) {
+                    entity.getScheduler().run(MetadataHandler.PLUGIN, scheduledTask -> {
+                        if (isPersistentEntity(entity))
+                            entity.remove();
+                    }, null);
+                }
                 temporarilyCachedChunks.remove(hashedChunk);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 1);
+        }.runDelayed(MetadataHandler.PLUGIN, 1);
     }
 
     @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
diff --git a/src/main/java/com/magmaguy/elitemobs/adventurersguild/GuildRank.java b/src/main/java/com/magmaguy/elitemobs/adventurersguild/GuildRank.java
index ead9234e..f4cf43aa 100644
--- a/src/main/java/com/magmaguy/elitemobs/adventurersguild/GuildRank.java
+++ b/src/main/java/com/magmaguy/elitemobs/adventurersguild/GuildRank.java
@@ -4,6 +4,7 @@ import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.config.AdventurersGuildConfig;
 import com.magmaguy.elitemobs.playerdata.ElitePlayerInventory;
 import com.magmaguy.elitemobs.playerdata.database.PlayerData;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Round;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.entity.Player;
@@ -234,7 +235,7 @@ public class GuildRank {
     public static class GuildRankEvents implements Listener {
         @EventHandler
         public void onPlayerJoin(PlayerJoinEvent event) {
-            new BukkitRunnable() {
+            new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                 @Override
                 public void run() {
                     if (event.getPlayer().isOnline())
@@ -242,7 +243,7 @@ public class GuildRank {
                                 GuildRank.getActiveGuildRank(event.getPlayer(), true),
                                 GuildRank.getGuildPrestigeRank(event.getPlayer(), true));
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, 20 * 3);
+            }.runDelayed(MetadataHandler.PLUGIN, 20 * 3);
         }
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/api/EliteExplosionEvent.java b/src/main/java/com/magmaguy/elitemobs/api/EliteExplosionEvent.java
index 5097dc65..27ef0d51 100644
--- a/src/main/java/com/magmaguy/elitemobs/api/EliteExplosionEvent.java
+++ b/src/main/java/com/magmaguy/elitemobs/api/EliteExplosionEvent.java
@@ -4,6 +4,7 @@ import com.magmaguy.elitemobs.CrashFix;
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.config.powers.PowersConfigFields;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import lombok.Getter;
 import org.bukkit.Location;
 import org.bukkit.block.BlockState;
@@ -95,13 +96,13 @@ public class EliteExplosionEvent extends Event implements Cancellable {
                     fallingBlock.setVelocity(fallingBlock.getLocation().clone().subtract(explosionSourceLocation).toVector().normalize().setY(1).multiply(0.5));
             }
 
-            new BukkitRunnable() {
+            new FoliaRunnable(fallingBlock.getScheduler(), null) {
                 @Override
                 public void run() {
                     if (fallingBlock.isValid())
                         fallingBlock.remove();
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, 20 * 4);
+            }.runDelayed(MetadataHandler.PLUGIN, 20 * 4);
 
             CrashFix.registerVisualFallingBlock(fallingBlock);
         }
diff --git a/src/main/java/com/magmaguy/elitemobs/api/EliteMobDamagedByPlayerEvent.java b/src/main/java/com/magmaguy/elitemobs/api/EliteMobDamagedByPlayerEvent.java
index a86da656..4afe4f38 100644
--- a/src/main/java/com/magmaguy/elitemobs/api/EliteMobDamagedByPlayerEvent.java
+++ b/src/main/java/com/magmaguy/elitemobs/api/EliteMobDamagedByPlayerEvent.java
@@ -244,7 +244,7 @@ public class EliteMobDamagedByPlayerEvent extends EliteDamageEvent {
                 ((EnderDragon) eliteEntity.getLivingEntity()).setPhase(EnderDragon.Phase.DYING);
                 eliteEntity.setDying(true);
                 //remove the dragon after it is done with the light show, this death doesn't show up on events
-                Bukkit.getScheduler().runTaskLater(MetadataHandler.PLUGIN, () -> new EventCaller(new EliteMobDeathEvent(eliteEntity)), 200);
+                eliteEntity.getLivingEntity().getScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> new EventCaller(new EliteMobDeathEvent(eliteEntity)), null, 200);
             }
 
             event.setDamage(EntityDamageEvent.DamageModifier.BASE, damage);
diff --git a/src/main/java/com/magmaguy/elitemobs/api/EliteMobEnterCombatEvent.java b/src/main/java/com/magmaguy/elitemobs/api/EliteMobEnterCombatEvent.java
index 9fc75f72..4e113631 100644
--- a/src/main/java/com/magmaguy/elitemobs/api/EliteMobEnterCombatEvent.java
+++ b/src/main/java/com/magmaguy/elitemobs/api/EliteMobEnterCombatEvent.java
@@ -18,6 +18,7 @@ import org.bukkit.event.HandlerList;
 import org.bukkit.event.Listener;
 
 import java.util.ArrayList;
+import java.util.concurrent.TimeUnit;
 
 public class EliteMobEnterCombatEvent extends Event {
 
@@ -35,10 +36,10 @@ public class EliteMobEnterCombatEvent extends Event {
             CommandRunner.runCommandFromList(customBossEntity.getCustomBossesConfigFields().getOnCombatEnterCommands(), new ArrayList<>());
         //Phase bosses can launch this event through phase switches
         if (!eliteEntity.isInCombat())
-            Bukkit.getScheduler().runTaskTimerAsynchronously(MetadataHandler.PLUGIN, task -> {
+            eliteEntity.getEntityScheduler().runAtFixedRate(MetadataHandler.PLUGIN, task -> {
                 if (!eliteEntity.isValid()) {
                     task.cancel();
-                    Bukkit.getScheduler().runTask(MetadataHandler.PLUGIN, syncTask -> new EventCaller(new EliteMobExitCombatEvent(eliteEntity, EliteMobExitCombatEvent.EliteMobExitCombatReason.ELITE_NOT_VALID)));
+                    Bukkit.getGlobalRegionScheduler().run(MetadataHandler.PLUGIN, syncTask -> new EventCaller(new EliteMobExitCombatEvent(eliteEntity, EliteMobExitCombatEvent.EliteMobExitCombatReason.ELITE_NOT_VALID)));
                     return;
                 }
                 if (!eliteEntity.isInCombatGracePeriod()) {
@@ -47,10 +48,10 @@ public class EliteMobEnterCombatEvent extends Event {
                         followRange = 200;
                     if (EntitySearch.getNearbyCombatPlayers(eliteEntity.getLocation(), followRange).isEmpty()) {
                         task.cancel();
-                        Bukkit.getScheduler().runTask(MetadataHandler.PLUGIN, syncTask -> new EventCaller(new EliteMobExitCombatEvent(eliteEntity, EliteMobExitCombatEvent.EliteMobExitCombatReason.NO_NEARBY_PLAYERS)));
+                        eliteEntity.getLivingEntity().getScheduler().run(MetadataHandler.PLUGIN, syncTask -> new EventCaller(new EliteMobExitCombatEvent(eliteEntity, EliteMobExitCombatEvent.EliteMobExitCombatReason.NO_NEARBY_PLAYERS)), null);
                     }
                 }
-            }, 20L, 20L);
+            }, null, 20L*50, 20L*50);
         eliteEntity.setInCombat(true);
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/api/PlayerPreTeleportEvent.java b/src/main/java/com/magmaguy/elitemobs/api/PlayerPreTeleportEvent.java
index 1974d0b5..2f7da48a 100644
--- a/src/main/java/com/magmaguy/elitemobs/api/PlayerPreTeleportEvent.java
+++ b/src/main/java/com/magmaguy/elitemobs/api/PlayerPreTeleportEvent.java
@@ -3,6 +3,7 @@ package com.magmaguy.elitemobs.api;
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.config.CombatTagConfig;
 import com.magmaguy.elitemobs.utils.EventCaller;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import net.md_5.bungee.api.ChatMessageType;
 import net.md_5.bungee.api.chat.TextComponent;
@@ -45,7 +46,7 @@ public class PlayerPreTeleportEvent extends Event implements Cancellable {
     }
 
     public void startTeleport() {
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             int timerLeft = 3;
 
             @Override
@@ -80,7 +81,7 @@ public class PlayerPreTeleportEvent extends Event implements Cancellable {
 
                 timerLeft--;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 20);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 20);
     }
 
     @Override
diff --git a/src/main/java/com/magmaguy/elitemobs/collateralminecraftchanges/KeepNeutralsAngry.java b/src/main/java/com/magmaguy/elitemobs/collateralminecraftchanges/KeepNeutralsAngry.java
index 2beb6656..a7472590 100644
--- a/src/main/java/com/magmaguy/elitemobs/collateralminecraftchanges/KeepNeutralsAngry.java
+++ b/src/main/java/com/magmaguy/elitemobs/collateralminecraftchanges/KeepNeutralsAngry.java
@@ -3,6 +3,7 @@ package com.magmaguy.elitemobs.collateralminecraftchanges;
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Bukkit;
 import org.bukkit.GameMode;
 import org.bukkit.attribute.Attribute;
@@ -25,7 +26,7 @@ public class KeepNeutralsAngry {
         //might already contain
         EntityType entityType = eliteEntity.getLivingEntity().getType();
         if (angryMobs.contains(eliteEntity)) return;
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 if (eliteEntity instanceof CustomBossEntity customBossEntity && customBossEntity.getCustomBossesConfigFields().isNeutral())
@@ -55,6 +56,6 @@ public class KeepNeutralsAngry {
                 ((Mob) eliteEntity.getLivingEntity()).setTarget(null);
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 20);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 20);
     }
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/combatsystem/combattag/CombatTag.java b/src/main/java/com/magmaguy/elitemobs/combatsystem/combattag/CombatTag.java
index adedaeae..fdb75f8a 100644
--- a/src/main/java/com/magmaguy/elitemobs/combatsystem/combattag/CombatTag.java
+++ b/src/main/java/com/magmaguy/elitemobs/combatsystem/combattag/CombatTag.java
@@ -3,6 +3,7 @@ package com.magmaguy.elitemobs.combatsystem.combattag;
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.config.CombatTagConfig;
 import com.magmaguy.elitemobs.entitytracker.EntityTracker;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import net.md_5.bungee.api.ChatMessageType;
 import net.md_5.bungee.api.chat.TextComponent;
 import org.bukkit.GameMode;
@@ -49,7 +50,7 @@ public class CombatTag implements Listener {
             player.spigot().sendMessage(ChatMessageType.ACTION_BAR,
                     TextComponent.fromLegacyText(CombatTagConfig.getCombatTagMessage()));
             player.addPotionEffect(new PotionEffect(PotionEffectType.SLOW_FALLING, 20 * 60, 0));
-            new BukkitRunnable() {
+            new FoliaRunnable(player.getScheduler(), null) {
                 @Override
                 public void run() {
                     if (!player.isOnline() || player.isDead())
@@ -59,7 +60,7 @@ public class CombatTag implements Listener {
                         player.removePotionEffect(PotionEffectType.SLOWNESS);
                     }
                 }
-            }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+            }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
         }
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/combatsystem/displays/PopupDisplay.java b/src/main/java/com/magmaguy/elitemobs/combatsystem/displays/PopupDisplay.java
index 2426f38f..f1cc7644 100644
--- a/src/main/java/com/magmaguy/elitemobs/combatsystem/displays/PopupDisplay.java
+++ b/src/main/java/com/magmaguy/elitemobs/combatsystem/displays/PopupDisplay.java
@@ -10,6 +10,7 @@ import com.magmaguy.elitemobs.entitytracker.EntityTracker;
 import com.magmaguy.elitemobs.items.customenchantments.CriticalStrikesEnchantment;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.utils.DialogArmorStand;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.VisualDisplay;
 import com.magmaguy.magmacore.util.Round;
 import org.bukkit.ChatColor;
@@ -95,7 +96,7 @@ public class PopupDisplay implements Listener {
         armorStand.addEquipmentLock(EquipmentSlot.HAND, ArmorStand.LockType.REMOVING_OR_CHANGING);
         armorStand.setRightArmPose(new EulerAngle(Math.PI / 2d, Math.PI + Math.PI / 2d, Math.PI));
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -112,7 +113,7 @@ public class PopupDisplay implements Listener {
                 }
                 counter++;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 1, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private Location getResistLocation(Player player, EliteEntity eliteEntity) {
@@ -130,7 +131,7 @@ public class PopupDisplay implements Listener {
         textDisplays[0] = generateWeakArmorStand(player, eliteEntity, material, -1);
         textDisplays[1] = generateWeakArmorStand(player, eliteEntity, material, 1);
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -146,7 +147,7 @@ public class PopupDisplay implements Listener {
                             .subtract(armorStand.getLocation()).toVector().normalize().multiply(.4)));
                 counter++;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 1, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private TextDisplay generateWeakArmorStand(Player player, EliteEntity eliteEntity, Material material, int offset) {
diff --git a/src/main/java/com/magmaguy/elitemobs/config/ConfigurationExporter.java b/src/main/java/com/magmaguy/elitemobs/config/ConfigurationExporter.java
index d0fbb999..240b1bd2 100644
--- a/src/main/java/com/magmaguy/elitemobs/config/ConfigurationExporter.java
+++ b/src/main/java/com/magmaguy/elitemobs/config/ConfigurationExporter.java
@@ -1,7 +1,9 @@
 package com.magmaguy.elitemobs.config;
 
 import com.magmaguy.elitemobs.MetadataHandler;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Logger;
+import org.bukkit.Bukkit;
 import org.bukkit.scheduler.BukkitRunnable;
 
 import java.io.*;
@@ -19,7 +21,7 @@ public class ConfigurationExporter {
     }
 
     public static void initializeConfigs() {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getAsyncScheduler(), null) {
             @Override
             public void run() {
                 Path configurationsPath = Paths.get(MetadataHandler.PLUGIN.getDataFolder().getAbsolutePath());
@@ -40,7 +42,7 @@ public class ConfigurationExporter {
                     e.printStackTrace();
                 }
             }
-        }.runTaskAsynchronously(MetadataHandler.PLUGIN);
+        }.run(MetadataHandler.PLUGIN);
     }
 
     public static void downloadFile(String fileURL, String saveFilePath) throws IOException {
diff --git a/src/main/java/com/magmaguy/elitemobs/config/translations/TranslationsConfigFields.java b/src/main/java/com/magmaguy/elitemobs/config/translations/TranslationsConfigFields.java
index cb8a724e..99277d71 100644
--- a/src/main/java/com/magmaguy/elitemobs/config/translations/TranslationsConfigFields.java
+++ b/src/main/java/com/magmaguy/elitemobs/config/translations/TranslationsConfigFields.java
@@ -175,7 +175,7 @@ public class TranslationsConfigFields extends CustomConfigFields {
     private void save() {
         if (saving) return;
         saving = true;
-        Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, () -> {
+        Bukkit.getGlobalRegionScheduler().execute(MetadataHandler.PLUGIN, () -> {
             ConfigurationEngine.fileSaverCustomValues(fileConfiguration, file);
             if (translationData != null)
                 ConfigurationEngine.fileSaverCustomValues(translationData, translationDataFile);
diff --git a/src/main/java/com/magmaguy/elitemobs/entitytracker/CustomProjectileData.java b/src/main/java/com/magmaguy/elitemobs/entitytracker/CustomProjectileData.java
index af143725..a7f04578 100644
--- a/src/main/java/com/magmaguy/elitemobs/entitytracker/CustomProjectileData.java
+++ b/src/main/java/com/magmaguy/elitemobs/entitytracker/CustomProjectileData.java
@@ -1,6 +1,7 @@
 package com.magmaguy.elitemobs.entitytracker;
 
 import com.magmaguy.elitemobs.MetadataHandler;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import lombok.Getter;
 import org.bukkit.Material;
 import org.bukkit.entity.Player;
@@ -50,23 +51,23 @@ public class CustomProjectileData implements Listener {
             return;
         customProjectileDataHashMap.put(event.getEntity(), new CustomProjectileData(player, event.getEntity()));
         //Cull entity 5 minutes later to avoid leaking
-        new BukkitRunnable() {
+        new FoliaRunnable(event.getEntity().getScheduler(), null) {
             @Override
             public void run() {
                 customProjectileDataHashMap.remove(event.getEntity());
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 60 * 20 * 5);
+        }.runDelayed(MetadataHandler.PLUGIN, 60 * 20 * 5);
     }
 
     @EventHandler
     public void onArrowLandEvent(ProjectileHitEvent event) {
         if (customProjectileDataHashMap.containsKey(event.getEntity()))
             //Delay removal by 1 just in case the data needs to be used for some event that runs after the hit event
-            new BukkitRunnable() {
+            new FoliaRunnable(event.getEntity().getScheduler(), null) {
                 @Override
                 public void run() {
                     customProjectileDataHashMap.remove(event.getEntity());
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, 1);
+            }.runDelayed(MetadataHandler.PLUGIN, 1);
     }
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/entitytracker/EntityTracker.java b/src/main/java/com/magmaguy/elitemobs/entitytracker/EntityTracker.java
index 9b2aaaef..c619b440 100644
--- a/src/main/java/com/magmaguy/elitemobs/entitytracker/EntityTracker.java
+++ b/src/main/java/com/magmaguy/elitemobs/entitytracker/EntityTracker.java
@@ -10,6 +10,7 @@ import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.npcs.NPCEntity;
 import com.magmaguy.elitemobs.tagger.PersistentTagger;
 import com.magmaguy.elitemobs.utils.EventCaller;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import lombok.Getter;
 import org.bukkit.Bukkit;
 import org.bukkit.Chunk;
@@ -120,7 +121,7 @@ public class EntityTracker implements Listener {
         BlockData finalPreviousBlockData = previousBlockData;
         //Death banners for instanced content don't timeout
         if (ticks < 0) return;
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getRegionScheduler(), block.getLocation()) {
             @Override
             public void run() {
                 if (Bukkit.getWorld(worldUUID) == null) return;
@@ -133,7 +134,7 @@ public class EntityTracker implements Listener {
                         //Case if a temp block was placed on a temp block
                         block.setType(Material.AIR);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, ticks);
+        }.runDelayed(MetadataHandler.PLUGIN, ticks);
     }
 
     public static boolean isTemporaryBlock(Block block) {
diff --git a/src/main/java/com/magmaguy/elitemobs/events/ActionEvent.java b/src/main/java/com/magmaguy/elitemobs/events/ActionEvent.java
index 43dd58b5..e0979c8d 100644
--- a/src/main/java/com/magmaguy/elitemobs/events/ActionEvent.java
+++ b/src/main/java/com/magmaguy/elitemobs/events/ActionEvent.java
@@ -103,7 +103,7 @@ public class ActionEvent extends CustomEvent {
     @Override
     public void startModifiers() {
         playerCooldowns.add(player);
-        Bukkit.getScheduler().runTaskLater(MetadataHandler.PLUGIN, () -> playerCooldowns.remove(player), 20L * 60L * EventsConfig.getActionEventMinimumCooldown());
+        player.getScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> playerCooldowns.remove(player), null, 20L * 60L * EventsConfig.getActionEventMinimumCooldown());
     }
 
     @Override
diff --git a/src/main/java/com/magmaguy/elitemobs/events/CustomEvent.java b/src/main/java/com/magmaguy/elitemobs/events/CustomEvent.java
index b5873d70..75f2a353 100644
--- a/src/main/java/com/magmaguy/elitemobs/events/CustomEvent.java
+++ b/src/main/java/com/magmaguy/elitemobs/events/CustomEvent.java
@@ -11,7 +11,9 @@ import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.thirdparty.worldguard.WorldGuardCompatibility;
 import com.magmaguy.elitemobs.thirdparty.worldguard.WorldGuardFlagChecker;
 import com.magmaguy.elitemobs.utils.CommandRunner;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Logger;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.scheduler.BukkitRunnable;
@@ -29,7 +31,7 @@ public abstract class CustomEvent {
     //Common fields
     public EventType eventType;
     public ArrayList<CustomBossEntity> primaryEliteMobs = new ArrayList<>();
-    public BukkitTask eventWatchdog;
+    public ScheduledTask eventWatchdog;
     public int announcementPriority;
     public CustomEventsConfigFields customEventsConfigFields;
     public String startMessage, endMessage;
@@ -101,13 +103,13 @@ public abstract class CustomEvent {
             CommandRunner.runCommandFromList(this.startEventCommands, new ArrayList<>());
         eventStartTime = System.currentTimeMillis();
         currentDay = dayCalculator();
-        eventWatchdog = new BukkitRunnable() {
+        eventWatchdog = new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             @Override
             public void run() {
                 commonWatchdogBehavior();
                 eventWatchdog();
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 20, 20);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 20, 20);
     }
 
     private int dayCalculator() {
@@ -164,7 +166,7 @@ public abstract class CustomEvent {
         if (this.endMessage != null)
             AnnouncementPriority.announce(this.endMessage, eventStartLocation.getWorld(), this.announcementPriority);
         if (this.endEventCommands != null)
-            Bukkit.getScheduler().runTask(MetadataHandler.PLUGIN, () -> CommandRunner.runCommandFromList(this.endEventCommands, new ArrayList<>()));
+            Bukkit.getGlobalRegionScheduler().run(MetadataHandler.PLUGIN, (scheduledTask) -> CommandRunner.runCommandFromList(this.endEventCommands, new ArrayList<>()));
         endModifiers();
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/events/TimedEvent.java b/src/main/java/com/magmaguy/elitemobs/events/TimedEvent.java
index 32c87af6..6abc9108 100644
--- a/src/main/java/com/magmaguy/elitemobs/events/TimedEvent.java
+++ b/src/main/java/com/magmaguy/elitemobs/events/TimedEvent.java
@@ -8,6 +8,7 @@ import com.magmaguy.elitemobs.config.customevents.CustomEventsConfig;
 import com.magmaguy.elitemobs.config.customevents.CustomEventsConfigFields;
 import com.magmaguy.elitemobs.mobconstructor.CustomSpawn;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.WeightedProbability;
 import com.magmaguy.magmacore.util.Logger;
 import lombok.Getter;
@@ -60,7 +61,7 @@ public class TimedEvent extends CustomEvent implements Listener {
     }
 
     private static void startEventPicker() {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             @Override
             public void run() {
                 if (Bukkit.getServer().getOnlinePlayers().isEmpty()) return;
@@ -74,7 +75,7 @@ public class TimedEvent extends CustomEvent implements Listener {
                 if (System.currentTimeMillis() < nextEventTrigger) return;
                 pickEvent();
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 20L * 60L * 5L, 20L * 60L);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 20L * 60L * 5L, 20L * 60L);
     }
 
     private static void pickEvent() {
@@ -157,10 +158,10 @@ public class TimedEvent extends CustomEvent implements Listener {
                     silentRetry = true;
                 }
 
-                Bukkit.getScheduler().runTaskLater(MetadataHandler.PLUGIN, () -> {
+                customBossEntity.getLivingEntity().getScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> {
                     customSpawn.setSpawnLocation(null);
                     customSpawn.queueSpawn();
-                }, 1);
+                }, null, 1);
                 return;
             }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/explosionregen/Explosion.java b/src/main/java/com/magmaguy/elitemobs/explosionregen/Explosion.java
index 848fe63e..7c4aeae8 100644
--- a/src/main/java/com/magmaguy/elitemobs/explosionregen/Explosion.java
+++ b/src/main/java/com/magmaguy/elitemobs/explosionregen/Explosion.java
@@ -11,6 +11,7 @@ import com.magmaguy.elitemobs.entitytracker.EntityTracker;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.thirdparty.worldguard.WorldGuardFlagChecker;
 import com.magmaguy.elitemobs.utils.EntityFinder;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -262,7 +263,7 @@ public class Explosion {
 
         Explosion explosion = this;
 
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             @Override
             public void run() {
                 if (detonatedBlocks.isEmpty()) {
@@ -275,7 +276,7 @@ public class Explosion {
                 fullBlockRestore(firstBlock, false);
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 20 * 60 * delayBeforeRegen, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 20 * 60 * delayBeforeRegen, 1);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/initialsetup/FirstTimeSetup.java b/src/main/java/com/magmaguy/elitemobs/initialsetup/FirstTimeSetup.java
index ffd3842a..ae50160d 100644
--- a/src/main/java/com/magmaguy/elitemobs/initialsetup/FirstTimeSetup.java
+++ b/src/main/java/com/magmaguy/elitemobs/initialsetup/FirstTimeSetup.java
@@ -3,6 +3,7 @@ package com.magmaguy.elitemobs.initialsetup;
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.config.DefaultConfig;
 import com.magmaguy.elitemobs.utils.DiscordLinks;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import net.md_5.bungee.api.chat.ClickEvent;
 import net.md_5.bungee.api.chat.ComponentBuilder;
@@ -18,7 +19,7 @@ public class FirstTimeSetup implements Listener {
     public void onPlayerLogin(PlayerJoinEvent event) {
         if (DefaultConfig.isSetupDone()) return;
         if (!event.getPlayer().hasPermission("elitemobs.*")) return;
-        new BukkitRunnable() {
+        new FoliaRunnable(event.getPlayer().getScheduler(), null) {
             @Override
             public void run() {
                 if (!event.getPlayer().isOnline()) return;
@@ -38,6 +39,6 @@ public class FirstTimeSetup implements Listener {
 
                 event.getPlayer().sendMessage("----------------------------------------------------");
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 20 * 10);
+        }.runDelayed(MetadataHandler.PLUGIN, 20 * 10);
     }
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/instanced/InstanceDeathLocation.java b/src/main/java/com/magmaguy/elitemobs/instanced/InstanceDeathLocation.java
index 696e75ff..0bfe2ac8 100644
--- a/src/main/java/com/magmaguy/elitemobs/instanced/InstanceDeathLocation.java
+++ b/src/main/java/com/magmaguy/elitemobs/instanced/InstanceDeathLocation.java
@@ -3,9 +3,11 @@ package com.magmaguy.elitemobs.instanced;
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.api.internal.RemovalReason;
 import com.magmaguy.elitemobs.entitytracker.EntityTracker;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.VisualDisplay;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import lombok.Getter;
+import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
@@ -67,7 +69,7 @@ public class InstanceDeathLocation {
 
     //This is necessary because physics updates might remove the banner while it should still be on there
     public void bannerWatchdog() {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             @Override
             public void run() {
                 if (!matchInstance.deathBanners.containsKey(bannerBlock)) {
@@ -80,6 +82,6 @@ public class InstanceDeathLocation {
                 EntityTracker.unregister(livesLeft, RemovalReason.EFFECT_TIMEOUT);
                 findBannerLocation(deathLocation);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 5, 5);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 5, 5);
     }
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/instanced/InstancePlayerManager.java b/src/main/java/com/magmaguy/elitemobs/instanced/InstancePlayerManager.java
index ac8ea6c4..8012707a 100644
--- a/src/main/java/com/magmaguy/elitemobs/instanced/InstancePlayerManager.java
+++ b/src/main/java/com/magmaguy/elitemobs/instanced/InstancePlayerManager.java
@@ -11,6 +11,8 @@ import com.magmaguy.elitemobs.instanced.arena.ArenaInstance;
 import com.magmaguy.elitemobs.instanced.dungeons.DungeonInstance;
 import com.magmaguy.elitemobs.playerdata.database.PlayerData;
 import com.magmaguy.elitemobs.utils.EventCaller;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
+import org.bukkit.Bukkit;
 import org.bukkit.GameMode;
 import org.bukkit.Location;
 import org.bukkit.attribute.Attribute;
@@ -52,7 +54,7 @@ public class InstancePlayerManager {
             new EventCaller(new PlayerJoinDungeonEvent(dungeonInstance));
 
 
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             @Override
             public void run() {
                 //Teleport the player to the correct location
@@ -65,7 +67,7 @@ public class InstancePlayerManager {
                 //Set the lives that the player has //todo: this needs to become configurable and be expanded upon in the future
                 matchInstance.playerLives.put(player, 3);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 1);
+        }.runDelayed(MetadataHandler.PLUGIN, 1);
 
         return true;
     }
diff --git a/src/main/java/com/magmaguy/elitemobs/instanced/MatchInstance.java b/src/main/java/com/magmaguy/elitemobs/instanced/MatchInstance.java
index a888875c..37e17c25 100644
--- a/src/main/java/com/magmaguy/elitemobs/instanced/MatchInstance.java
+++ b/src/main/java/com/magmaguy/elitemobs/instanced/MatchInstance.java
@@ -9,7 +9,9 @@ import com.magmaguy.elitemobs.api.instanced.MatchLeaveEvent;
 import com.magmaguy.elitemobs.config.ArenasConfig;
 import com.magmaguy.elitemobs.config.DefaultConfig;
 import com.magmaguy.elitemobs.playerdata.database.PlayerData;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
+import io.papermc.paper.threadedregions.scheduler.GlobalRegionScheduler;
 import lombok.Getter;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
@@ -26,6 +28,7 @@ import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.player.PlayerQuitEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.scheduler.BukkitRunnable;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -138,7 +141,7 @@ public abstract class MatchInstance {
     }
 
     private void startWatchdogs() {
-        new WatchdogTask().runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        new WatchdogTask().runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     public void countdownMatch() {
@@ -148,7 +151,7 @@ public abstract class MatchInstance {
             return;
         }
         state = InstancedRegionState.STARTING;
-        new CountdownTask().runTaskTimer(MetadataHandler.PLUGIN, 0L, 20L);
+        new CountdownTask().runAtFixedRate(MetadataHandler.PLUGIN, 1L, 20L);
     }
 
     private void playerWatchdog() {
@@ -187,7 +190,7 @@ public abstract class MatchInstance {
     }
 
     private void instanceMessages() {
-        Bukkit.getScheduler().scheduleSyncRepeatingTask(MetadataHandler.PLUGIN, () -> {
+        Bukkit.getGlobalRegionScheduler().runAtFixedRate(MetadataHandler.PLUGIN, (scheduledTask) -> {
             if (state == InstancedRegionState.WAITING)
                 announce(ArenasConfig.getArenaStartHintMessage().replace("$count", minPlayers + ""));
         }, 0L, 20 * 60L);
@@ -197,7 +200,11 @@ public abstract class MatchInstance {
         participants.forEach(player -> player.sendMessage(ChatColorConverter.convert(message)));
     }
 
-    private class WatchdogTask extends BukkitRunnable {
+    private class WatchdogTask extends FoliaRunnable {
+        public WatchdogTask() {
+            super(Bukkit.getGlobalRegionScheduler());
+        }
+
         @Override
         public void run() {
             playerWatchdog();
@@ -206,7 +213,11 @@ public abstract class MatchInstance {
         }
     }
 
-    private class CountdownTask extends BukkitRunnable {
+    private class CountdownTask extends FoliaRunnable {
+
+        public CountdownTask() {
+            super(Bukkit.getGlobalRegionScheduler());
+        }
         int counter = 0;
 
         @Override
diff --git a/src/main/java/com/magmaguy/elitemobs/instanced/arena/ArenaInstance.java b/src/main/java/com/magmaguy/elitemobs/instanced/arena/ArenaInstance.java
index 467f217c..49cdb11e 100644
--- a/src/main/java/com/magmaguy/elitemobs/instanced/arena/ArenaInstance.java
+++ b/src/main/java/com/magmaguy/elitemobs/instanced/arena/ArenaInstance.java
@@ -14,6 +14,7 @@ import com.magmaguy.elitemobs.playerdata.database.PlayerData;
 import com.magmaguy.elitemobs.thirdparty.mythicmobs.MythicMobsInterface;
 import com.magmaguy.elitemobs.utils.ConfigurationLocation;
 import com.magmaguy.elitemobs.utils.EventCaller;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.shapes.Cylinder;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import com.magmaguy.magmacore.util.Logger;
@@ -195,7 +196,7 @@ public class ArenaInstance extends MatchInstance {
             victory();
             return;
         }
-        Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, () -> {
+        Bukkit.getGlobalRegionScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> {
             if (arenaState == ArenaState.IDLE) return;
             String title = ArenasConfig.getWaveTitle();
             String subtitle = ArenasConfig.getWaveSubtitle();
@@ -214,7 +215,7 @@ public class ArenaInstance extends MatchInstance {
 
 
     private void arenaWatchdog() {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             @Override
             public void run() {
                 if (arenaState != ArenaState.ACTIVE) return;
@@ -222,9 +223,11 @@ public class ArenaInstance extends MatchInstance {
                     if (!customBossEntity.exists()) removeBoss(customBossEntity);
                 if (!nonEliteMobsEntities.isEmpty())
                     for (Entity entity : (HashSet<Entity>) nonEliteMobsEntities.clone())
-                        if (!entity.isValid()) removeBoss(entity);
+                        entity.getScheduler().run(MetadataHandler.PLUGIN, scheduledTask -> {
+                            if (!entity.isValid()) removeBoss(entity);
+                        }, null);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0L, 20L);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1L, 20L);
     }
 
     public void removeBoss(CustomBossEntity customBossEntity) {
@@ -301,7 +304,7 @@ public class ArenaInstance extends MatchInstance {
         } else
             participants.forEach(player -> player.sendTitle(ArenasConfig.getDefeatTitle().replace("$wave", currentWave + ""), ArenasConfig.getDefeatSubtitle().replace("$wave", currentWave + ""), 20, 20 * 10, 20));
 
-        Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, this::destroyMatch, customArenasConfigFields.getDelayBetweenWaves());
+        Bukkit.getGlobalRegionScheduler().runDelayed(MetadataHandler.PLUGIN, scheduledTask -> destroyMatch(), customArenasConfigFields.getDelayBetweenWaves());
     }
 
     @Override
diff --git a/src/main/java/com/magmaguy/elitemobs/instanced/dungeons/DungeonInstance.java b/src/main/java/com/magmaguy/elitemobs/instanced/dungeons/DungeonInstance.java
index 94b26f0c..efd69173 100644
--- a/src/main/java/com/magmaguy/elitemobs/instanced/dungeons/DungeonInstance.java
+++ b/src/main/java/com/magmaguy/elitemobs/instanced/dungeons/DungeonInstance.java
@@ -15,11 +15,9 @@ import com.magmaguy.elitemobs.instanced.MatchInstance;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.InstancedBossEntity;
 import com.magmaguy.elitemobs.npcs.NPCEntity;
 import com.magmaguy.elitemobs.treasurechest.TreasureChest;
-import com.magmaguy.elitemobs.utils.ConfigurationLocation;
-import com.magmaguy.elitemobs.utils.EventCaller;
-import com.magmaguy.elitemobs.utils.MapListInterpreter;
-import com.magmaguy.elitemobs.utils.WorldInstantiator;
+import com.magmaguy.elitemobs.utils.*;
 import com.magmaguy.magmacore.util.Logger;
+import io.papermc.paper.threadedregions.scheduler.GlobalRegionScheduler;
 import lombok.Getter;
 import org.apache.commons.io.FileUtils;
 import org.bukkit.Bukkit;
@@ -27,10 +25,12 @@ import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.entity.Player;
 import org.bukkit.scheduler.BukkitRunnable;
+import org.jetbrains.annotations.NotNull;
 
 import java.io.File;
 import java.util.*;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.TimeUnit;
 
 public class DungeonInstance extends MatchInstance {
     @Getter
@@ -72,7 +72,7 @@ public class DungeonInstance extends MatchInstance {
         this.difficultyName = difficultyName;
         setDifficulty(difficultyName);
         addNewPlayer(player);
-        new InitializeEntitiesTask(this, dungeonPackagerConfigFields, world).runTaskLater(MetadataHandler.PLUGIN, 20 * 3L);
+        new InitializeEntitiesTask(this, dungeonPackagerConfigFields, world).runDelayed(MetadataHandler.PLUGIN, 20 * 3L);
         dungeonInstances.add(this);
         super.permission = dungeonPackagerConfigFields.getPermission();
     }
@@ -98,7 +98,7 @@ public class DungeonInstance extends MatchInstance {
                 cloneWorldFiles(instancedDungeonsConfigFields, instancedWorldName, player));
         future.thenAccept(file -> {
             if (file == null) return;
-            new InitializeInstancedWorldTask(instancedDungeonsConfigFields, instancedWorldName, player, file, difficultyName).runTask(MetadataHandler.PLUGIN);
+            new InitializeInstancedWorldTask(instancedDungeonsConfigFields, instancedWorldName, player, file, difficultyName).run(MetadataHandler.PLUGIN);
         });
     }
 
@@ -192,7 +192,7 @@ public class DungeonInstance extends MatchInstance {
             return;
         }
         announce(DungeonsConfig.getInstancedDungeonCompleteMessage());
-        new DestroyMatchTask().runTaskLater(MetadataHandler.PLUGIN, 2 * 60 * 20L);
+        new DestroyMatchTask().runDelayed(MetadataHandler.PLUGIN, 2 * 60 * 20L);
     }
 
     @Override
@@ -212,7 +212,7 @@ public class DungeonInstance extends MatchInstance {
             return;
         }
         world.getEntities().forEach(entity -> EntityTracker.unregister(entity, RemovalReason.WORLD_UNLOAD));
-        new RemoveInstanceTask(dungeonInstance, instancedWorldFile).runTaskLater(MetadataHandler.PLUGIN, 20 * 30L);
+        new RemoveInstanceTask(dungeonInstance, instancedWorldFile).runDelayed(MetadataHandler.PLUGIN, 20 * 30L);
     }
 
     private void setDifficulty(String difficultyName) {
@@ -252,7 +252,7 @@ public class DungeonInstance extends MatchInstance {
         return location.getWorld().equals(startLocation.getWorld());
     }
 
-    private static class InitializeInstancedWorldTask extends BukkitRunnable {
+    private static class InitializeInstancedWorldTask extends FoliaRunnable {
         private final DungeonPackagerConfigFields instancedDungeonsConfigFields;
         private final String instancedWorldName;
         private final Player player;
@@ -264,6 +264,7 @@ public class DungeonInstance extends MatchInstance {
                                             Player player,
                                             File file,
                                             String difficultyName) {
+            super(player.getScheduler(), null);
             this.instancedDungeonsConfigFields = instancedDungeonsConfigFields;
             this.instancedWorldName = instancedWorldName;
             this.player = player;
@@ -277,12 +278,13 @@ public class DungeonInstance extends MatchInstance {
         }
     }
 
-    private class InitializeEntitiesTask extends BukkitRunnable {
+    private class InitializeEntitiesTask extends FoliaRunnable {
         private final DungeonInstance dungeonInstance;
         private final DungeonPackagerConfigFields dungeonPackagerConfigFields;
         private final World world;
 
         public InitializeEntitiesTask(DungeonInstance dungeonInstance, DungeonPackagerConfigFields dungeonPackagerConfigFields, World world) {
+            super(Bukkit.getGlobalRegionScheduler());
             this.dungeonInstance = dungeonInstance;
             this.dungeonPackagerConfigFields = dungeonPackagerConfigFields;
             this.world = world;
@@ -296,18 +298,23 @@ public class DungeonInstance extends MatchInstance {
         }
     }
 
-    private class DestroyMatchTask extends BukkitRunnable {
+    private class DestroyMatchTask extends FoliaRunnable {
+        public DestroyMatchTask() {
+            super(Bukkit.getGlobalRegionScheduler());
+        }
+
         @Override
         public void run() {
             destroyMatch();
         }
     }
 
-    private class RemoveInstanceTask extends BukkitRunnable {
+    private class RemoveInstanceTask extends FoliaRunnable {
         private final DungeonInstance dungeonInstance;
         private final File instancedWorldFile;
 
         public RemoveInstanceTask(DungeonInstance dungeonInstance, File instancedWorldFile) {
+            super(Bukkit.getGlobalRegionScheduler());
             this.dungeonInstance = dungeonInstance;
             this.instancedWorldFile = instancedWorldFile;
         }
@@ -321,14 +328,14 @@ public class DungeonInstance extends MatchInstance {
                 Logger.warn("Failed to unload world " + instancedWorldName + " ! This is bad, report this to the developer!");
                 return;
             }
-            new BukkitRunnable() {
+            new FoliaRunnable(Bukkit.getAsyncScheduler(), TimeUnit.MILLISECONDS) {
                 @Override
                 public void run() {
                     try{FileUtils.deleteDirectory(instancedWorldFile);} catch (Exception e){
                         Logger.warn("Failed to delete " + instancedWorldFile + " ! This is bad, report this to the developer!");
                     }
                 }
-            }.runTaskLaterAsynchronously(MetadataHandler.PLUGIN, 20L * 60 * 2); //wait 2 minutes after unloading world before removing files
+            }.runDelayed(MetadataHandler.PLUGIN, 20L * 60 * 2 *50); //wait 2 minutes after unloading world before removing files
         }
     }
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/instanced/dungeons/EnchantmentDungeonInstance.java b/src/main/java/com/magmaguy/elitemobs/instanced/dungeons/EnchantmentDungeonInstance.java
index ec4b511e..c9b2c0eb 100644
--- a/src/main/java/com/magmaguy/elitemobs/instanced/dungeons/EnchantmentDungeonInstance.java
+++ b/src/main/java/com/magmaguy/elitemobs/instanced/dungeons/EnchantmentDungeonInstance.java
@@ -5,10 +5,12 @@ import com.magmaguy.elitemobs.config.SpecialItemSystemsConfig;
 import com.magmaguy.elitemobs.config.dungeonpackager.DungeonPackagerConfig;
 import com.magmaguy.elitemobs.config.dungeonpackager.DungeonPackagerConfigFields;
 import com.magmaguy.elitemobs.menus.ItemEnchantmentMenu;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.WorldInstantiator;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import lombok.Getter;
 import lombok.Setter;
+import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.entity.Player;
@@ -66,7 +68,7 @@ public class EnchantmentDungeonInstance extends DungeonInstance {
                 cloneWorldFiles(dungeonPackagerConfigFields, instancedWordName, player));
         future.thenAccept(file -> {
             if (file == null) return;
-            new BukkitRunnable() {
+            new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
                 @Override
                 public void run() {
                     DungeonInstance dungeonInstance = initializeInstancedWorld(dungeonPackagerConfigFields, instancedWordName, player, file, (String) dungeonPackagerConfigFields.getDifficulties().get(0).get("name"));
@@ -75,7 +77,7 @@ public class EnchantmentDungeonInstance extends DungeonInstance {
                         enchantmentDungeonInstance.setCurrentItem(itemFromInventory.clone());
                     }
                 }
-            }.runTask(MetadataHandler.PLUGIN);
+            }.run(MetadataHandler.PLUGIN);
         });
 
         return true;
@@ -83,12 +85,12 @@ public class EnchantmentDungeonInstance extends DungeonInstance {
 
     @Override
     public void endMatch() {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             @Override
             public void run() {
                 removeInstance();
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 20 * 10);
+        }.runDelayed(MetadataHandler.PLUGIN, 20 * 10);
     }
 
     @Override
diff --git a/src/main/java/com/magmaguy/elitemobs/items/ItemLootShower.java b/src/main/java/com/magmaguy/elitemobs/items/ItemLootShower.java
index 4fbd06cf..9240fd9a 100644
--- a/src/main/java/com/magmaguy/elitemobs/items/ItemLootShower.java
+++ b/src/main/java/com/magmaguy/elitemobs/items/ItemLootShower.java
@@ -8,6 +8,7 @@ import com.magmaguy.elitemobs.economy.EconomyHandler;
 import com.magmaguy.elitemobs.entitytracker.EntityTracker;
 import com.magmaguy.elitemobs.items.customenchantments.SoulbindEnchantment;
 import com.magmaguy.elitemobs.playerdata.ElitePlayerInventory;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import com.magmaguy.magmacore.util.ItemStackGenerator;
 import com.magmaguy.magmacore.util.Logger;
@@ -52,7 +53,7 @@ public class ItemLootShower implements Listener {
 
         if (Math.abs(mobLevel - ElitePlayerInventory.playerInventories.get(player.getUniqueId()).getFullPlayerTier(false))
                 > ItemSettingsConfig.getLootLevelDifferenceLockout()) {
-            new BukkitRunnable() {
+            new FoliaRunnable(player.getScheduler(), null) {
                 int counter = 0;
 
                 @Override
@@ -67,7 +68,7 @@ public class ItemLootShower implements Listener {
                                     .replace("$playerLevel", ElitePlayerInventory.playerInventories.get(player.getUniqueId()).getFullPlayerTier(false) + "")
                                     .replace("$bossLevel", (int) mobLevel + "")));
                 }
-            }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+            }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
             return;
         }
         if (ItemSettingsConfig.isPutLootDirectlyIntoPlayerInventory())
@@ -84,7 +85,7 @@ public class ItemLootShower implements Listener {
     private static void sendCurrencyNotification(Player player) {
         if (playerCurrencyPickup.containsKey(player)) return;
 
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             double oldAmount = 0;
 
             @Override
@@ -111,7 +112,7 @@ public class ItemLootShower implements Listener {
 
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 40);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 40);
 
     }
 
@@ -121,7 +122,7 @@ public class ItemLootShower implements Listener {
     }
 
     private void addIndirectly(Location location, int currencyAmount2) {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getRegionScheduler(), location) {
             int currencyAmount = currencyAmount2;
 
             @Override
@@ -183,7 +184,7 @@ public class ItemLootShower implements Listener {
                     currencyAmount--;
                 }
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 2, 2);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 2, 2);
     }
 
     private int getCurrencyAmount(double eliteMobTier) {
@@ -398,7 +399,7 @@ public class ItemLootShower implements Listener {
             coinValues.put(item.getUniqueId(), this);
             pickupable = false;
             item.setGravity(false);
-            new BukkitRunnable() {
+            new FoliaRunnable(item.getScheduler(), null) {
                 @Override
                 public void run() {
                     if (coinValues.containsKey(item.getUniqueId())) {
@@ -407,9 +408,9 @@ public class ItemLootShower implements Listener {
                         coinValues.remove(item.getUniqueId());
                     }
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, 20 * 60 * 5);
+            }.runDelayed(MetadataHandler.PLUGIN, 20 * 60 * 5);
 
-            new BukkitRunnable() {
+            new FoliaRunnable(item.getScheduler(), null) {
                 int counter = 0;
 
                 @Override
@@ -451,7 +452,7 @@ public class ItemLootShower implements Listener {
 
                     counter++;
                 }
-            }.runTaskTimer(MetadataHandler.PLUGIN, 1, 1);
+            }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
         }
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/items/LootTables.java b/src/main/java/com/magmaguy/elitemobs/items/LootTables.java
index 6fcc717f..cd2ea3ae 100644
--- a/src/main/java/com/magmaguy/elitemobs/items/LootTables.java
+++ b/src/main/java/com/magmaguy/elitemobs/items/LootTables.java
@@ -14,6 +14,7 @@ import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.RegionalBossEntity;
 import com.magmaguy.elitemobs.playerdata.database.PlayerData;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.WeightedProbability;
 import com.magmaguy.magmacore.util.Logger;
 import net.md_5.bungee.api.ChatMessageType;
@@ -58,12 +59,12 @@ public class LootTables implements Listener {
             if (AdventurersGuildConfig.isGuildLootLimiter()) {
                 if (itemLevel > GuildRank.getActiveGuildRank(player) * 10) {
                     itemLevel = GuildRank.getActiveGuildRank(player) * 10D;
-                    new BukkitRunnable() {
+                    new FoliaRunnable(player.getScheduler(), null) {
                         @Override
                         public void run() {
                             player.spigot().sendMessage(ChatMessageType.ACTION_BAR, TextComponent.fromLegacyText(AdventurersGuildConfig.getLootLimiterMessage()));
                         }
-                    }.runTaskLater(MetadataHandler.PLUGIN, 20 * 10L);
+                    }.runDelayed(MetadataHandler.PLUGIN, 20 * 10L);
                 }
             }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/items/RareDropEffect.java b/src/main/java/com/magmaguy/elitemobs/items/RareDropEffect.java
index 2d007a55..a01321ba 100644
--- a/src/main/java/com/magmaguy/elitemobs/items/RareDropEffect.java
+++ b/src/main/java/com/magmaguy/elitemobs/items/RareDropEffect.java
@@ -3,6 +3,7 @@ package com.magmaguy.elitemobs.items;
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.config.ItemSettingsConfig;
 import com.magmaguy.elitemobs.items.itemconstructor.ItemQualityColorizer;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Particle;
 import org.bukkit.entity.Item;
 import org.bukkit.event.EventHandler;
@@ -19,7 +20,7 @@ public class RareDropEffect implements Listener {
                 ItemQualityColorizer.getItemQuality(item.getItemStack()).equals(ItemQualityColorizer.ItemQuality.GOLD)))
             return;
 
-        new BukkitRunnable() {
+        new FoliaRunnable(item.getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -37,7 +38,7 @@ public class RareDropEffect implements Listener {
                     cancel();
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 20);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 20);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/EarthquakeEnchantment.java b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/EarthquakeEnchantment.java
index 7e3553b1..e807082a 100644
--- a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/EarthquakeEnchantment.java
+++ b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/EarthquakeEnchantment.java
@@ -32,7 +32,7 @@ public class EarthquakeEnchantment extends CustomEnchantment {
     public static void doEarthquakeEnchantment(int earthquakeLevel, Player player) {
         player.sendMessage(EarthquakeConfig.getEarthquakeActivationMessage());
         player.setVelocity(player.getLocation().getDirection().normalize().multiply((Math.log(earthquakeLevel + 2 / 2D) + 1) / 20D).setY(Math.log(earthquakeLevel + 2 / 2D)));
-        Bukkit.getScheduler().runTaskTimer(MetadataHandler.PLUGIN, (task) -> {
+        player.getScheduler().runAtFixedRate(MetadataHandler.PLUGIN, (task) -> {
             player.setFallDistance(0f);
             if (!player.isValid() || !player.getLocation().clone().subtract(new Vector(0, 1, 0)).getBlock().isPassable()
                     && player.getLocation().getY() - player.getLocation().getBlock().getY() < 0.1 || !player.getLocation().clone().getBlock().isPassable()) {
@@ -46,7 +46,7 @@ public class EarthquakeEnchantment extends CustomEnchantment {
                             ThreadLocalRandom.current().nextInt(20, 40),
                             ThreadLocalRandom.current().nextInt(10, 20)
                     ), 1));
-        }, 5, 1);
+        }, null, 5, 1);
     }
 
     public static void doLanding(int level, Player player) {
@@ -84,12 +84,12 @@ public class EarthquakeEnchantment extends CustomEnchantment {
             if (earthquakeLevel < 1) return;
             if (!players.contains(event.getPlayer().getUniqueId())) {
                 players.add(event.getPlayer().getUniqueId());
-                Bukkit.getScheduler().runTaskLater(MetadataHandler.PLUGIN, (task) -> players.remove(event.getPlayer().getUniqueId()), 10);
+                Bukkit.getGlobalRegionScheduler().runDelayed(MetadataHandler.PLUGIN, (task) -> players.remove(event.getPlayer().getUniqueId()), 10);
                 return;
             }
             players.remove(event.getPlayer().getUniqueId());
             cooldownPlayers.add(event.getPlayer().getUniqueId());
-            Bukkit.getScheduler().runTaskLater(MetadataHandler.PLUGIN, (task) -> {
+            Bukkit.getGlobalRegionScheduler().runDelayed(MetadataHandler.PLUGIN, (task) -> {
                 event.getPlayer().sendMessage(EarthquakeConfig.getEarthquakeAvailableMessage());
                 cooldownPlayers.remove(event.getPlayer().getUniqueId());
             }, 20L * 60 * 2);
diff --git a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/FlamethrowerEnchantment.java b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/FlamethrowerEnchantment.java
index 91f205f2..1782ad1b 100644
--- a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/FlamethrowerEnchantment.java
+++ b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/FlamethrowerEnchantment.java
@@ -5,6 +5,7 @@ import com.magmaguy.elitemobs.config.enchantments.EnchantmentsConfig;
 import com.magmaguy.elitemobs.events.BossCustomAttackDamage;
 import com.magmaguy.elitemobs.playerdata.ElitePlayerInventory;
 import com.magmaguy.elitemobs.utils.CooldownHandler;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.apache.commons.math3.exception.NotFiniteNumberException;
 import org.bukkit.Location;
 import org.bukkit.Particle;
@@ -93,7 +94,7 @@ public class FlamethrowerEnchantment extends CustomEnchantment {
 
         private void doFlamethrowerPhase1(Player player, Location targetLocation) {
 
-            new BukkitRunnable() {
+            new FoliaRunnable(player.getScheduler(), null) {
                 int counter = 0;
 
                 @Override
@@ -113,7 +114,7 @@ public class FlamethrowerEnchantment extends CustomEnchantment {
 
                 }
 
-            }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+            }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
         }
 
@@ -132,7 +133,7 @@ public class FlamethrowerEnchantment extends CustomEnchantment {
          */
         private void doFlamethrowerPhase2(Player player, Location target) {
             List<Location> damagePoints = generateDamagePoints(player, target);
-            new BukkitRunnable() {
+            new FoliaRunnable(player.getScheduler(), null) {
                 int timer = 0;
 
                 @Override
@@ -148,7 +149,7 @@ public class FlamethrowerEnchantment extends CustomEnchantment {
                     doFlamethrowerPhase3(player, target);
                     cancel();
                 }
-            }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+            }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
         }
 
 
@@ -158,7 +159,7 @@ public class FlamethrowerEnchantment extends CustomEnchantment {
          * @param player
          */
         private void doFlamethrowerPhase3(Player player, Location fixedPlayerLocation) {
-            new BukkitRunnable() {
+            new FoliaRunnable(player.getScheduler(), null) {
                 int timer = 0;
 
                 @Override
@@ -172,7 +173,7 @@ public class FlamethrowerEnchantment extends CustomEnchantment {
                     if (timer < 20) return;
                     cancel();
                 }
-            }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+            }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
         }
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/GrapplingHookEnchantment.java b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/GrapplingHookEnchantment.java
index 67c50690..be5c4ad8 100644
--- a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/GrapplingHookEnchantment.java
+++ b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/GrapplingHookEnchantment.java
@@ -2,6 +2,7 @@ package com.magmaguy.elitemobs.items.customenchantments;
 
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.items.ItemTagger;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.entity.AbstractArrow;
@@ -29,7 +30,7 @@ public class GrapplingHookEnchantment extends CustomEnchantment {
     }
 
     public static void trackGrapplingHook(AbstractArrow arrow, Player player) {
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -47,12 +48,12 @@ public class GrapplingHookEnchantment extends CustomEnchantment {
                 }
                 counter++;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 1, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private static void zipline(Player player, Location location) {
         player.addPotionEffect(new PotionEffect(PotionEffectType.LEVITATION, 20 * 10, 1));
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             int timer = 0;
 
             @Override
@@ -67,7 +68,7 @@ public class GrapplingHookEnchantment extends CustomEnchantment {
                 player.setVelocity(location.clone().subtract(player.getLocation()).toVector().normalize().multiply(.5));
                 timer++;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 1L, 1L);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1L, 1L);
     }
 
     private static Location getTargetBlock(Location airLocation) {
diff --git a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/LightningEnchantment.java b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/LightningEnchantment.java
index 9751f1e2..568804bf 100644
--- a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/LightningEnchantment.java
+++ b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/LightningEnchantment.java
@@ -56,7 +56,7 @@ public class LightningEnchantment extends CustomEnchantment {
             if (lightningChance <= 0) return;
             if (lightningChance >= ThreadLocalRandom.current().nextDouble()) return;
             playersInCooldown.add(event.getPlayer());
-            Bukkit.getScheduler().runTaskLater(MetadataHandler.PLUGIN, () -> playersInCooldown.remove(event.getPlayer()), LightningConfig.minimumCooldown * 20L);
+            Bukkit.getGlobalRegionScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> playersInCooldown.remove(event.getPlayer()), LightningConfig.minimumCooldown * 20L);
             playerLightning(event.getPlayer(), event.getEliteMobEntity().getLivingEntity().getLocation());
         }
     }
diff --git a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/MeteorShowerEnchantment.java b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/MeteorShowerEnchantment.java
index d4899d96..b46426da 100644
--- a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/MeteorShowerEnchantment.java
+++ b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/MeteorShowerEnchantment.java
@@ -2,6 +2,7 @@ package com.magmaguy.elitemobs.items.customenchantments;
 
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.items.ItemTagger;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Particle;
@@ -25,7 +26,7 @@ public class MeteorShowerEnchantment extends CustomEnchantment {
     }
 
     public static void doMeteorShower(Player player) {
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -52,7 +53,7 @@ public class MeteorShowerEnchantment extends CustomEnchantment {
                 }
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private static void doCloudEffect(Location location) {
diff --git a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/PlasmaBootsEnchantment.java b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/PlasmaBootsEnchantment.java
index c1cd9a0b..02394975 100644
--- a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/PlasmaBootsEnchantment.java
+++ b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/PlasmaBootsEnchantment.java
@@ -2,6 +2,7 @@ package com.magmaguy.elitemobs.items.customenchantments;
 
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.playerdata.ElitePlayerInventory;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Bukkit;
 import org.bukkit.Color;
 import org.bukkit.Location;
@@ -31,7 +32,7 @@ public class PlasmaBootsEnchantment extends CustomEnchantment {
 
     public static void doPlasmaBootsEnchantment(int level, Player player) {
         player.setVelocity(new Vector(0, .8, 0));
-        Bukkit.getScheduler().runTaskTimer(MetadataHandler.PLUGIN, (task) -> {
+        player.getScheduler().runAtFixedRate(MetadataHandler.PLUGIN, (task) -> {
             if (!player.isValid() || !player.getLocation().clone().subtract(new Vector(0, 1, 0)).getBlock().isPassable()
                     && player.getLocation().getY() - player.getLocation().getBlock().getY() < 0.1 || !player.getLocation().clone().getBlock().isPassable()) {
                 task.cancel();
@@ -44,7 +45,7 @@ public class PlasmaBootsEnchantment extends CustomEnchantment {
                             ThreadLocalRandom.current().nextInt(122, 255),
                             ThreadLocalRandom.current().nextInt(0, 100)
                     ), 1));
-        }, 5, 1);
+        }, null, 5, 1);
     }
 
     private static void doLanding(int level, Player player) {
@@ -64,7 +65,7 @@ public class PlasmaBootsEnchantment extends CustomEnchantment {
     }
 
     private static void createProjectile(Vector shotVector, Location sourceLocation, Player player) {
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             final Location currentLocation = sourceLocation.clone();
             int counter = 0;
 
@@ -91,7 +92,7 @@ public class PlasmaBootsEnchantment extends CustomEnchantment {
                     cancel();
                 }
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private static void doDamage(Player player, LivingEntity livingEntity) {
@@ -123,12 +124,12 @@ public class PlasmaBootsEnchantment extends CustomEnchantment {
             if (plasmaBootLevel < 1) return;
             if (!players.contains(event.getPlayer().getUniqueId())) {
                 players.add(event.getPlayer().getUniqueId());
-                Bukkit.getScheduler().runTaskLater(MetadataHandler.PLUGIN, task -> players.remove(event.getPlayer().getUniqueId()), 10);
+                Bukkit.getGlobalRegionScheduler().runDelayed(MetadataHandler.PLUGIN, task -> players.remove(event.getPlayer().getUniqueId()), 10);
                 return;
             }
             players.remove(event.getPlayer().getUniqueId());
             cooldownPlayers.add(event.getPlayer().getUniqueId());
-            Bukkit.getScheduler().runTaskLater(MetadataHandler.PLUGIN, task -> cooldownPlayers.remove(event.getPlayer().getUniqueId()), 20L * 60 * 2);
+            Bukkit.getGlobalRegionScheduler().runDelayed(MetadataHandler.PLUGIN, task -> cooldownPlayers.remove(event.getPlayer().getUniqueId()), 20L * 60 * 2);
 
             doPlasmaBootsEnchantment((int) plasmaBootLevel, event.getPlayer());
 
diff --git a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/SoulbindEnchantment.java b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/SoulbindEnchantment.java
index cf24b7db..d7585968 100644
--- a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/SoulbindEnchantment.java
+++ b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/SoulbindEnchantment.java
@@ -7,6 +7,7 @@ import com.magmaguy.elitemobs.config.enchantments.EnchantmentsConfig;
 import com.magmaguy.elitemobs.config.enchantments.premade.SoulbindConfig;
 import com.magmaguy.elitemobs.entitytracker.EntityTracker;
 import com.magmaguy.elitemobs.items.EliteItemLore;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.VisualDisplay;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import org.bukkit.Bukkit;
@@ -59,14 +60,14 @@ public class SoulbindEnchantment extends CustomEnchantment {
     }
 
     public static void addPhysicalDisplay(Item item, Player player) {
-        new BukkitRunnable() {
+        new FoliaRunnable(item.getScheduler(), null) {
             @Override
             public void run() {
                 if (item == null)
                     return;
                 TextDisplay soulboundPlayer = VisualDisplay.generateTemporaryTextDisplay(item.getLocation().clone().add(new Vector(0, -50, 0)), ChatColorConverter.convert(
                         SoulbindConfig.hologramStrings.replace("$player", player.getDisplayName())));
-                new BukkitRunnable() {
+                new FoliaRunnable(player.getScheduler(), null) {
                     final Location lastLocation = item.getLocation().clone();
                     int counter = 0;
 
@@ -83,9 +84,9 @@ public class SoulbindEnchantment extends CustomEnchantment {
                         if (counter == 1)
                             soulboundPlayer.teleport(item.getLocation().clone().add(new Vector(0, 0.5, 0)));
                     }
-                }.runTaskTimer(MetadataHandler.PLUGIN, 1, 1);
+                }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 20 * 3);
+        }.runDelayed(MetadataHandler.PLUGIN, 20 * 3);
     }
 
     public static boolean isValidSoulbindUser(ItemMeta itemMeta, Player player) {
diff --git a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/SummonMerchantEnchantment.java b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/SummonMerchantEnchantment.java
index 04fcec80..23972e72 100644
--- a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/SummonMerchantEnchantment.java
+++ b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/SummonMerchantEnchantment.java
@@ -4,6 +4,7 @@ import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.config.enchantments.EnchantmentsConfig;
 import com.magmaguy.elitemobs.items.ItemTagger;
 import com.magmaguy.elitemobs.npcs.NPCEntity;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import org.bukkit.entity.Player;
 import org.bukkit.event.EventHandler;
@@ -49,12 +50,12 @@ public class SummonMerchantEnchantment extends CustomEnchantment implements List
             return;
         }
         //pass to a sync task
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             @Override
             public void run() {
                 new NPCEntity(player.getLocation());
             }
-        }.runTask(MetadataHandler.PLUGIN);
+        }.run(MetadataHandler.PLUGIN);
     }
 
     public static class SummonMerchantEvents implements Listener {
@@ -68,12 +69,12 @@ public class SummonMerchantEnchantment extends CustomEnchantment implements List
                 return;
             if (playerCooldowns.contains(event.getPlayer())) return;
             playerCooldowns.add(event.getPlayer());
-            new BukkitRunnable() {
+            new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                 @Override
                 public void run() {
                     playerCooldowns.remove(event.getPlayer());
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, 20 * 60);
+            }.runDelayed(MetadataHandler.PLUGIN, 20 * 60);
             doSummonMerchant(event.getPlayer(), false, event.getPlayer().getInventory().getItemInMainHand());
         }
 
@@ -83,12 +84,12 @@ public class SummonMerchantEnchantment extends CustomEnchantment implements List
             if (event.getMessage().equalsIgnoreCase(merchantMessage)) {
                 if (playerCooldowns.contains(event.getPlayer())) return;
                 playerCooldowns.add(event.getPlayer());
-                new BukkitRunnable() {
+                new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                     @Override
                     public void run() {
                         playerCooldowns.remove(event.getPlayer());
                     }
-                }.runTaskLater(MetadataHandler.PLUGIN, 20 * 60);
+                }.runDelayed(MetadataHandler.PLUGIN, 20 * 60);
                 for (ItemStack itemStack : event.getPlayer().getInventory())
                     if (itemStack != null)
                         if (getEnchantment(itemStack.getItemMeta()) > 0) {
diff --git a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/SummonWolfEnchantment.java b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/SummonWolfEnchantment.java
index b5c51789..58b9165b 100644
--- a/src/main/java/com/magmaguy/elitemobs/items/customenchantments/SummonWolfEnchantment.java
+++ b/src/main/java/com/magmaguy/elitemobs/items/customenchantments/SummonWolfEnchantment.java
@@ -4,6 +4,7 @@ import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.items.ItemTagger;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.playerdata.ElitePlayerInventory;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Logger;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Player;
@@ -75,12 +76,12 @@ public class SummonWolfEnchantment extends CustomEnchantment {
         public void onRightClick(PlayerInteractEvent event) {
             if (playerCooldowns.contains(event.getPlayer())) return;
             playerCooldowns.add(event.getPlayer());
-            new BukkitRunnable() {
+            new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                 @Override
                 public void run() {
                     playerCooldowns.remove(event.getPlayer());
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, 20 * 60L);
+            }.runDelayed(MetadataHandler.PLUGIN, 20 * 60L);
             if (!(event.getAction().equals(Action.RIGHT_CLICK_AIR) || event.getAction().equals(Action.RIGHT_CLICK_BLOCK)))
                 return;
             if (getEnchantment(event.getPlayer().getInventory().getItemInMainHand().getItemMeta()) > 0)
diff --git a/src/main/java/com/magmaguy/elitemobs/items/customloottable/SharedLootTable.java b/src/main/java/com/magmaguy/elitemobs/items/customloottable/SharedLootTable.java
index 3beeedbc..e2306308 100644
--- a/src/main/java/com/magmaguy/elitemobs/items/customloottable/SharedLootTable.java
+++ b/src/main/java/com/magmaguy/elitemobs/items/customloottable/SharedLootTable.java
@@ -7,6 +7,7 @@ import com.magmaguy.elitemobs.items.customenchantments.SoulbindEnchantment;
 import com.magmaguy.elitemobs.items.customitems.CustomItem;
 import com.magmaguy.elitemobs.menus.LootMenu;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import lombok.Getter;
 import org.bukkit.Bukkit;
@@ -39,7 +40,7 @@ public class SharedLootTable {
         sharedLootTables.put(eliteEntity, this);
         damagers.forEach(damager -> lootMenus.add(new LootMenu(damager, this, getPlayerTable(damager))));
         if (damagers.size() > 1)
-            Bukkit.getScheduler().runTaskLater(MetadataHandler.PLUGIN, this::messagePlayers, 1);
+            Bukkit.getGlobalRegionScheduler().runDelayed(MetadataHandler.PLUGIN, scheduledTask -> messagePlayers(), 1);
         endLoot();
     }
 
@@ -57,21 +58,21 @@ public class SharedLootTable {
 
     private void endLoot() {
         if (damagers.size() < 2) {
-            new BukkitRunnable() {
+            new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
                 @Override
                 public void run() {
                     distribute();
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, 1);
+            }.runDelayed(MetadataHandler.PLUGIN, 1);
             return;
         }
 
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             @Override
             public void run() {
                 distribute();
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 20L * durationInSeconds);
+        }.runDelayed(MetadataHandler.PLUGIN, 20L * durationInSeconds);
     }
 
     private void distribute() {
diff --git a/src/main/java/com/magmaguy/elitemobs/items/potioneffects/PlayerPotionEffects.java b/src/main/java/com/magmaguy/elitemobs/items/potioneffects/PlayerPotionEffects.java
index 57787dc6..63c38915 100644
--- a/src/main/java/com/magmaguy/elitemobs/items/potioneffects/PlayerPotionEffects.java
+++ b/src/main/java/com/magmaguy/elitemobs/items/potioneffects/PlayerPotionEffects.java
@@ -9,6 +9,7 @@ import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.playerdata.ElitePlayerInventory;
 import com.magmaguy.elitemobs.playerdata.database.PlayerData;
 import com.magmaguy.elitemobs.utils.EntityFinder;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Bukkit;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.LivingEntity;
@@ -28,27 +29,30 @@ import java.util.HashSet;
 public class PlayerPotionEffects implements Listener {
 
     public PlayerPotionEffects() {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             @Override
             public void run() {
                 //scan through what players are wearing
-                for (Player player : Bukkit.getOnlinePlayers())
-                    if (ElitePlayerInventory.playerInventories.get(player.getUniqueId()) != null &&
-                            PlayerData.getPlayerData(player.getUniqueId()) != null)
-                        for (ElitePotionEffect elitePotionEffect : ElitePlayerInventory.playerInventories.get(player.getUniqueId()).getContinuousPotionEffects(true))
-                            doContinuousPotionEffect(elitePotionEffect, player);
+                for (Player player : Bukkit.getOnlinePlayers()) {
+                    player.getScheduler().run(MetadataHandler.PLUGIN, scheduledTask -> {
+                        if (ElitePlayerInventory.playerInventories.get(player.getUniqueId()) != null &&
+                                PlayerData.getPlayerData(player.getUniqueId()) != null)
+                            for (ElitePotionEffect elitePotionEffect : ElitePlayerInventory.playerInventories.get(player.getUniqueId()).getContinuousPotionEffects(true))
+                                doContinuousPotionEffect(elitePotionEffect, player);
+                    }, null);
+                }
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 20L, 20L);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 20L, 20L);
     }
 
     public static void addOnHitCooldown(HashSet<Player> cooldownList, Player player, long delay) {
         cooldownList.add(player);
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             @Override
             public void run() {
                 cooldownList.remove(player);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, delay);
+        }.runDelayed(MetadataHandler.PLUGIN, delay);
     }
 
     private void doContinuousPotionEffect(ElitePotionEffect elitePotionEffect, Player player) {
diff --git a/src/main/java/com/magmaguy/elitemobs/menus/CustomShopMenu.java b/src/main/java/com/magmaguy/elitemobs/menus/CustomShopMenu.java
index edfdcac3..94404d07 100644
--- a/src/main/java/com/magmaguy/elitemobs/menus/CustomShopMenu.java
+++ b/src/main/java/com/magmaguy/elitemobs/menus/CustomShopMenu.java
@@ -11,6 +11,7 @@ import com.magmaguy.elitemobs.items.ItemTagger;
 import com.magmaguy.elitemobs.items.ItemWorthCalculator;
 import com.magmaguy.elitemobs.items.customenchantments.SoulbindEnchantment;
 import com.magmaguy.elitemobs.items.customitems.CustomItem;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
@@ -131,12 +132,12 @@ public class CustomShopMenu {
                 }
 
                 cooldownPlayers.add(event.getWhoClicked().getUniqueId());
-                new BukkitRunnable() {
+                new FoliaRunnable(event.getWhoClicked().getScheduler(), null) {
                     @Override
                     public void run() {
                         cooldownPlayers.remove(event.getWhoClicked().getUniqueId());
                     }
-                }.runTaskLater(MetadataHandler.PLUGIN, 20 * 2L);
+                }.runDelayed(MetadataHandler.PLUGIN, 20 * 2L);
 
                 populateShop(event.getInventory(), Bukkit.getPlayer(event.getWhoClicked().getUniqueId()));
                 event.setCancelled(true);
diff --git a/src/main/java/com/magmaguy/elitemobs/menus/ProceduralShopMenu.java b/src/main/java/com/magmaguy/elitemobs/menus/ProceduralShopMenu.java
index 9a3adf8c..e57ceada 100644
--- a/src/main/java/com/magmaguy/elitemobs/menus/ProceduralShopMenu.java
+++ b/src/main/java/com/magmaguy/elitemobs/menus/ProceduralShopMenu.java
@@ -10,6 +10,7 @@ import com.magmaguy.elitemobs.items.EliteItemLore;
 import com.magmaguy.elitemobs.items.ItemTagger;
 import com.magmaguy.elitemobs.items.ItemWorthCalculator;
 import com.magmaguy.elitemobs.items.itemconstructor.ItemConstructor;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
@@ -115,12 +116,12 @@ public class ProceduralShopMenu {
                 }
 
                 cooldownPlayers.add(event.getWhoClicked().getUniqueId());
-                new BukkitRunnable() {
+                new FoliaRunnable(event.getWhoClicked().getScheduler(), null) {
                     @Override
                     public void run() {
                         cooldownPlayers.remove(event.getWhoClicked().getUniqueId());
                     }
-                }.runTaskLater(MetadataHandler.PLUGIN, 20 * 2L);
+                }.runDelayed(MetadataHandler.PLUGIN, 20 * 2L);
 
                 populateShop(event.getInventory(), Bukkit.getPlayer(event.getWhoClicked().getUniqueId()));
                 event.setCancelled(true);
diff --git a/src/main/java/com/magmaguy/elitemobs/menus/SharedShopElements.java b/src/main/java/com/magmaguy/elitemobs/menus/SharedShopElements.java
index dc3d6d1f..6a4f0c1c 100644
--- a/src/main/java/com/magmaguy/elitemobs/menus/SharedShopElements.java
+++ b/src/main/java/com/magmaguy/elitemobs/menus/SharedShopElements.java
@@ -3,11 +3,13 @@ package com.magmaguy.elitemobs.menus;
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.config.EconomySettingsConfig;
 import com.magmaguy.elitemobs.economy.EconomyHandler;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryClickEvent;
+import org.bukkit.plugin.java.JavaPlugin;
 import org.bukkit.scheduler.BukkitRunnable;
 
 public class SharedShopElements {
@@ -21,7 +23,7 @@ public class SharedShopElements {
 
     public static void buyMessage(Player player, String itemDisplayName, double itemValue) {
 
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
 
             @Override
             public void run() {
@@ -43,13 +45,13 @@ public class SharedShopElements {
             }
 
 
-        }.runTaskLater(Bukkit.getPluginManager().getPlugin(MetadataHandler.ELITE_MOBS), 2);
+        }.runDelayed(MetadataHandler.PLUGIN, 2);
 
     }
 
     public static void insufficientFundsMessage(Player player, double itemValue) {
 
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
 
             @Override
             public void run() {
@@ -74,7 +76,7 @@ public class SharedShopElements {
             }
 
 
-        }.runTaskLater(Bukkit.getPluginManager().getPlugin(MetadataHandler.ELITE_MOBS), 2);
+        }.runDelayed(MetadataHandler.PLUGIN, 2);
 
         player.closeInventory();
 
diff --git a/src/main/java/com/magmaguy/elitemobs/mobconstructor/CustomSpawn.java b/src/main/java/com/magmaguy/elitemobs/mobconstructor/CustomSpawn.java
index 2fcb4547..88871c7d 100644
--- a/src/main/java/com/magmaguy/elitemobs/mobconstructor/CustomSpawn.java
+++ b/src/main/java/com/magmaguy/elitemobs/mobconstructor/CustomSpawn.java
@@ -14,6 +14,7 @@ import com.magmaguy.elitemobs.events.TimedEvent;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.playerdata.database.PlayerData;
 import com.magmaguy.elitemobs.thirdparty.worldguard.WorldGuardFlagChecker;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Logger;
 import lombok.Getter;
 import lombok.Setter;
@@ -29,6 +30,7 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
 import java.util.concurrent.ThreadLocalRandom;
+import java.util.concurrent.TimeUnit;
 
 public class CustomSpawn {
 
@@ -107,23 +109,23 @@ public class CustomSpawn {
     public void queueSpawn() {
         //Make sure a location exists
         if (spawnLocation == null)
-            new BukkitRunnable() {
+            new FoliaRunnable(Bukkit.getAsyncScheduler(), null) {
                 @Override
                 public void run() {
                     generateCustomSpawn();
                 }
-            }.runTaskAsynchronously(MetadataHandler.PLUGIN);
+            }.run(MetadataHandler.PLUGIN);
         else
             spawn();
     }
 
     private void spawn() {
         //Pass back to sync if it's in async
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             @Override
             public void run() {
                 if (spawnLocation == null) {
-                    Bukkit.getScheduler().runTaskLater(MetadataHandler.PLUGIN, () -> generateCustomSpawn(), 1);
+                    Bukkit.getGlobalRegionScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> generateCustomSpawn(), 1);
                     cancel();
                     return;
                 }
@@ -133,7 +135,7 @@ public class CustomSpawn {
                 if (!testEntity.isValid()) {
                     spawnLocation = null;
                     //Run 1 tick later to make sure it doesn't get stuck trying over and over again in the same tick
-                    Bukkit.getScheduler().runTaskLater(MetadataHandler.PLUGIN, () -> generateCustomSpawn(), 1);
+                    Bukkit.getGlobalRegionScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> generateCustomSpawn(), 1);
                     cancel();
                     return;
                 }
@@ -159,14 +161,14 @@ public class CustomSpawn {
                     timedEvent.queueEvent();
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private void generateCustomSpawn() {
         //If the global cooldown if enforced and this is a timed event wait for the cd to be over
 
         if (timedEvent != null && System.currentTimeMillis() < TimedEvent.getNextEventStartMinimum()) {
-            Bukkit.getScheduler().scheduleAsyncDelayedTask(MetadataHandler.PLUGIN, this::generateCustomSpawn, 20 * 60L);
+            Bukkit.getAsyncScheduler().runDelayed(MetadataHandler.PLUGIN, scheduledTask -> generateCustomSpawn(), 20 * 60L * 50, TimeUnit.MILLISECONDS);
             return;
         }
 
@@ -185,12 +187,12 @@ public class CustomSpawn {
 
         if (spawnLocation == null) {
             if (keepTrying) {
-                new BukkitRunnable() {
+                new FoliaRunnable(Bukkit.getAsyncScheduler(), TimeUnit.MILLISECONDS) {
                     @Override
                     public void run() {
                         generateCustomSpawn();
                     }
-                }.runTaskLaterAsynchronously(MetadataHandler.PLUGIN, 20 * 60);
+                }.runDelayed(MetadataHandler.PLUGIN, 20 * 60* 50);
             } else {
                 customBossEntities.forEach((customBossEntity -> {
                     if (customBossEntity.summoningEntity != null)
diff --git a/src/main/java/com/magmaguy/elitemobs/mobconstructor/EliteEntity.java b/src/main/java/com/magmaguy/elitemobs/mobconstructor/EliteEntity.java
index bb4e7e56..12e16270 100644
--- a/src/main/java/com/magmaguy/elitemobs/mobconstructor/EliteEntity.java
+++ b/src/main/java/com/magmaguy/elitemobs/mobconstructor/EliteEntity.java
@@ -21,6 +21,7 @@ import com.magmaguy.elitemobs.powerstances.MajorPowerPowerStance;
 import com.magmaguy.elitemobs.powerstances.MinorPowerPowerStance;
 import com.magmaguy.elitemobs.tagger.PersistentTagger;
 import com.magmaguy.elitemobs.utils.EventCaller;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import com.magmaguy.magmacore.util.Logger;
 import lombok.Getter;
@@ -557,22 +558,22 @@ public class EliteEntity {
 
     public void doCooldown() {
         setInCooldown(true);
-        new BukkitRunnable() {
+        new FoliaRunnable(this.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 setInCooldown(false);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 20 * 15);
+        }.runDelayed(MetadataHandler.PLUGIN, 20 * 15);
     }
 
     public void doGlobalPowerCooldown(int ticks) {
         setInCooldown(true);
-        new BukkitRunnable() {
+        new FoliaRunnable(this.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 setInCooldown(false);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, ticks);
+        }.runDelayed(MetadataHandler.PLUGIN, ticks);
     }
 
     public void setTriggeredAntiExploit(boolean triggeredAntiExploit) {
@@ -597,22 +598,22 @@ public class EliteEntity {
 
     public void setInAntiExploitCooldown() {
         this.inAntiExploitCooldown = true;
-        new BukkitRunnable() {
+        new FoliaRunnable(this.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 inAntiExploitCooldown = false;
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 20);
+        }.runDelayed(MetadataHandler.PLUGIN, 20);
     }
 
     public void setCombatGracePeriod(int delayInTicks) {
         this.inCombatGracePeriod = true;
-        new BukkitRunnable() {
+        new FoliaRunnable(this.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 inCombatGracePeriod = false;
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, delayInTicks);
+        }.runDelayed(MetadataHandler.PLUGIN, delayInTicks);
     }
 
     public void addGlobalReinforcement(CustomBossEntity customBossEntity) {
diff --git a/src/main/java/com/magmaguy/elitemobs/mobconstructor/PersistentObjectHandler.java b/src/main/java/com/magmaguy/elitemobs/mobconstructor/PersistentObjectHandler.java
index a9190b58..de55ec5d 100644
--- a/src/main/java/com/magmaguy/elitemobs/mobconstructor/PersistentObjectHandler.java
+++ b/src/main/java/com/magmaguy/elitemobs/mobconstructor/PersistentObjectHandler.java
@@ -148,7 +148,7 @@ public class PersistentObjectHandler {
         public void chunkLoadEvent(ChunkLoadEvent event) {
             int chunkLocation = chunkLocation(event.getChunk());
             List<PersistentObjectHandler> simplePersistentEntityList = new ArrayList<>(persistentObjects.get(chunkLocation + ""));
-            Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, () -> loadChunk(simplePersistentEntityList), 1L);
+            Bukkit.getRegionScheduler().runDelayed(MetadataHandler.PLUGIN, event.getWorld(), event.getChunk().getX(), event.getChunk().getZ(), (scheduledTask) -> loadChunk(simplePersistentEntityList), 1L);
         }
 
         @EventHandler(ignoreCancelled = true, priority = EventPriority.LOW)
diff --git a/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossBossBar.java b/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossBossBar.java
index 51655d24..dcb2144a 100644
--- a/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossBossBar.java
+++ b/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossBossBar.java
@@ -3,9 +3,11 @@ package com.magmaguy.elitemobs.mobconstructor.custombosses;
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.config.DefaultConfig;
 import com.magmaguy.elitemobs.config.MobCombatSettingsConfig;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import com.magmaguy.magmacore.util.Logger;
 import com.magmaguy.magmacore.util.Round;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import net.md_5.bungee.api.chat.ClickEvent;
 import net.md_5.bungee.api.chat.ComponentBuilder;
 import net.md_5.bungee.api.chat.HoverEvent;
@@ -30,7 +32,7 @@ public class CustomBossBossBar {
     private final CustomBossEntity customBossEntity;
     private final Map<Player, BossBar> bossBars = new HashMap<>();
     private final HashSet<Player> trackingPlayers = new HashSet<>();
-    private BukkitTask bossBarUpdater;
+    private ScheduledTask bossBarUpdater;
     private boolean warned = false;
 
     public CustomBossBossBar(CustomBossEntity customBossEntity) {
@@ -111,7 +113,7 @@ public class CustomBossBossBar {
     }
 
     public void start() {
-        bossBarUpdater = new BukkitRunnable() {
+        bossBarUpdater = new FoliaRunnable(customBossEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 //This can happen on phase changes where boss bars might not be configured on subsequent entities
@@ -145,7 +147,7 @@ public class CustomBossBossBar {
                                 createBossBar((Player) entity);
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 5);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 5);
     }
 
     private void createBossBar(Player player) {
diff --git a/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossEntity.java b/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossEntity.java
index b2d479fd..22c03760 100644
--- a/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossEntity.java
+++ b/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossEntity.java
@@ -26,8 +26,10 @@ import com.magmaguy.elitemobs.thirdparty.libsdisguises.DisguiseEntity;
 import com.magmaguy.elitemobs.utils.ChunkLocationChecker;
 import com.magmaguy.elitemobs.utils.CommandRunner;
 import com.magmaguy.elitemobs.utils.EventCaller;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import com.magmaguy.magmacore.util.Logger;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import lombok.Getter;
 import lombok.Setter;
 import org.bukkit.Bukkit;
@@ -53,7 +55,7 @@ public class CustomBossEntity extends EliteEntity implements Listener, Persisten
 
     @Getter
     protected static HashSet<CustomBossEntity> trackableCustomBosses = new HashSet<>();
-    private final List<BukkitTask> globalReinforcements = new ArrayList<>();
+    private final List<ScheduledTask> globalReinforcements = new ArrayList<>();
     @Getter
     protected CustomBossesConfigFields customBossesConfigFields;
     protected CustomBossEntity customBossMount = null;
@@ -65,7 +67,7 @@ public class CustomBossEntity extends EliteEntity implements Listener, Persisten
     protected CustomBossTrail customBossTrail;
     @Getter
     protected CustomBossBossBar customBossBossBar;
-    protected Integer escapeMechanism;
+    protected ScheduledTask escapeMechanism;
     @Getter
     protected PhaseBossEntity phaseBossEntity = null;
     protected String worldName;
@@ -102,7 +104,7 @@ public class CustomBossEntity extends EliteEntity implements Listener, Persisten
     @Getter
     @Setter
     private boolean dynamicLevel = false;
-    private BukkitTask dynamicLevelUpdater = null;
+    private ScheduledTask dynamicLevelUpdater = null;
 
     /**
      * Uses a builder pattern in order to construct a CustomBossEntity at an arbitrary point in the future. Does not
@@ -388,7 +390,7 @@ public class CustomBossEntity extends EliteEntity implements Listener, Persisten
     private void updateDynamicLevel() {
         if (dynamicLevelUpdater != null) return;
         CustomBossEntity customBossEntity = this;
-        dynamicLevelUpdater = new BukkitRunnable() {
+        dynamicLevelUpdater = new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             @Override
             public void run() {
                 if (customBossEntity.isInCombat()) return;
@@ -410,7 +412,7 @@ public class CustomBossEntity extends EliteEntity implements Listener, Persisten
                 CustomBossMegaConsumer.setName(getLivingEntity(), customBossEntity, level);
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 20 * 5L, 20 * 5L);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 20 * 5L, 20 * 5L);
     }
 
     private void startBossTrails() {
@@ -518,7 +520,7 @@ public class CustomBossEntity extends EliteEntity implements Listener, Persisten
             if (!(this instanceof RegionalBossEntity) || this instanceof InstancedBossEntity)
                 EntityTracker.getEliteMobEntities().remove(super.eliteUUID);
             new EventCaller(new EliteMobRemoveEvent(this, removalReason));
-            if (escapeMechanism != null) Bukkit.getScheduler().cancelTask(escapeMechanism);
+            if (escapeMechanism != null) escapeMechanism.cancel();
             trackableCustomBosses.remove(this);
             if (persistentObjectHandler != null) {
                 persistentObjectHandler.remove();
diff --git a/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossEscapeMechanism.java b/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossEscapeMechanism.java
index 4ca03b29..d30cc1a5 100644
--- a/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossEscapeMechanism.java
+++ b/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossEscapeMechanism.java
@@ -4,21 +4,22 @@ import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.api.internal.RemovalReason;
 import com.magmaguy.elitemobs.thirdparty.discordsrv.DiscordSRVAnnouncement;
 import com.magmaguy.magmacore.util.ChatColorConverter;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
 
 public class CustomBossEscapeMechanism {
 
-    public static Integer startEscapeTicks(int timeout, CustomBossEntity customBossEntity) {
+    public static ScheduledTask startEscapeTicks(int timeout, CustomBossEntity customBossEntity) {
         if (timeout < 1) return null;
-        return Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, () -> {
+        return customBossEntity.getLivingEntity().getScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> {
             doEscapeMessage(customBossEntity);
-        }, timeout);
+        }, null, timeout);
     }
 
-    public static Integer startEscape(int timeout, CustomBossEntity customBossEntity) {
+    public static ScheduledTask startEscape(int timeout, CustomBossEntity customBossEntity) {
         if (timeout < 1) return null;
-        return Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, () -> {
+        return Bukkit.getGlobalRegionScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> {
             doEscapeMessage(customBossEntity);
         }, 20L * 60L * timeout);
     }
diff --git a/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossMount.java b/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossMount.java
index 66e8d4b2..22bcf7ea 100644
--- a/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossMount.java
+++ b/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossMount.java
@@ -4,6 +4,7 @@ import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.combatsystem.antiexploit.PreventMountExploit;
 import com.magmaguy.elitemobs.config.custombosses.CustomBossesConfig;
 import com.magmaguy.elitemobs.config.custombosses.CustomBossesConfigFields;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Logger;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.LivingEntity;
@@ -43,7 +44,7 @@ public class CustomBossMount {
                 mountEntity.setMount(true);
                 mountEntity.spawn(false);
 
-                new BukkitRunnable() {
+                new FoliaRunnable(mountEntity.getLivingEntity().getScheduler(), null) {
                     @Override
                     public void run() {
                         if (!mountEntity.isValid()) return;
@@ -57,7 +58,7 @@ public class CustomBossMount {
                         }
                         customBossEntity.customBossMount = mountEntity;
                     }
-                }.runTaskLater(MetadataHandler.PLUGIN, 5);
+                }.runDelayed(MetadataHandler.PLUGIN, 5);
                 return mountEntity;
             }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossTrail.java b/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossTrail.java
index 8bac40bf..0b3b7b43 100644
--- a/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossTrail.java
+++ b/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomBossTrail.java
@@ -4,7 +4,9 @@ import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.api.internal.RemovalReason;
 import com.magmaguy.elitemobs.entitytracker.EntityTracker;
 import com.magmaguy.elitemobs.powerstances.VisualItemInitializer;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ItemStackGenerator;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.Particle;
@@ -21,7 +23,7 @@ import java.util.concurrent.ThreadLocalRandom;
 public class CustomBossTrail {
 
     private final CustomBossEntity customBossEntity;
-    private final ArrayList<BukkitTask> bukkitTasks = new ArrayList<>();
+    private final ArrayList<ScheduledTask> bukkitTasks = new ArrayList<>();
     private LivingEntity livingEntity;
 
     public CustomBossTrail(CustomBossEntity customBossEntity) {
@@ -56,7 +58,7 @@ public class CustomBossTrail {
                 particle.equals(Particle.ITEM) ||
                 particle.equals(Particle.DUST))
             return;
-        bukkitTasks.add(new BukkitRunnable() {
+        bukkitTasks.add(new FoliaRunnable(livingEntity.getScheduler(), null) {
             @Override
             public void run() {
                 //In case of boss death or chunk unload, stop the effect
@@ -68,11 +70,11 @@ public class CustomBossTrail {
                 Location entityCenter = livingEntity.getLocation().clone().add(0, livingEntity.getHeight() / 2, 0);
                 livingEntity.getWorld().spawnParticle(particle, entityCenter, 1, 0.1, 0.1, 0.1, 0.05);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1));
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1));
     }
 
     private void doItemTrail(Material material) {
-        bukkitTasks.add(new BukkitRunnable() {
+        bukkitTasks.add(new FoliaRunnable(livingEntity.getScheduler(), null) {
 
             @Override
             public void run() {
@@ -89,20 +91,20 @@ public class CustomBossTrail {
                         ThreadLocalRandom.current().nextDouble() / 5 - 0.10,
                         ThreadLocalRandom.current().nextDouble() / 5 - 0.10,
                         ThreadLocalRandom.current().nextDouble() / 5 - 0.10));
-                new BukkitRunnable() {
+                new FoliaRunnable(item.getScheduler(), null) {
                     @Override
                     public void run() {
                         item.remove();
                         EntityTracker.unregister(item, RemovalReason.EFFECT_TIMEOUT);
                     }
-                }.runTaskLater(MetadataHandler.PLUGIN, 20);
+                }.runDelayed(MetadataHandler.PLUGIN, 20);
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 5));
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 5));
     }
 
     public void terminateTrails() {
-        for (BukkitTask bukkitTask : bukkitTasks) bukkitTask.cancel();
+        for (ScheduledTask bukkitTask : bukkitTasks) bukkitTask.cancel();
         bukkitTasks.clear();
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomMusic.java b/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomMusic.java
index dc548b0b..130f3672 100644
--- a/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomMusic.java
+++ b/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/CustomMusic.java
@@ -4,7 +4,9 @@ import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.api.PlayerTeleportEvent;
 import com.magmaguy.elitemobs.config.dungeonpackager.DungeonPackagerConfigFields;
 import com.magmaguy.elitemobs.dungeons.EliteMobsWorld;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Logger;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import lombok.Getter;
 import org.bukkit.Location;
 import org.bukkit.World;
@@ -36,8 +38,8 @@ public class CustomMusic {
     private String name2 = null;
     @Getter
     private int durationTicks2 = -1;
-    private BukkitTask bossScannerTask = null;
-    private BukkitTask songTask = null;
+    private ScheduledTask bossScannerTask = null;
+    private ScheduledTask songTask = null;
     private World world;
 
     //Format: name=rsp.name length=durations_milliseconds->name=rsp.name length=duration_milliseconds
@@ -98,7 +100,7 @@ public class CustomMusic {
         if (bossScannerTask != null) {
             bossScannerTask.cancel();
         }
-        bossScannerTask = new BukkitRunnable() {
+        bossScannerTask = new FoliaRunnable(customBossEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 if (!customBossEntity.exists()) {
@@ -107,7 +109,7 @@ public class CustomMusic {
                 }
                 play(customBossEntity.getLocation(), customBossEntity.getCustomBossesConfigFields().getFollowDistance());
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     public void stop() {
@@ -159,7 +161,7 @@ public class CustomMusic {
         //Case for a song with no transition
         CustomMusic customMusic = this;
         if (name2 == null) {
-            songTask = new BukkitRunnable() {
+            songTask = new FoliaRunnable(player.getScheduler(), null) {
                 @Override
                 public void run() {
                     if (contentType == ContentType.BOSS && !customBossEntity.exists() ||
@@ -174,12 +176,12 @@ public class CustomMusic {
                     if (!playerSongSingleton.containsKey(player)) playerSongSingleton.put(player, customMusic);
                     player.playSound(player.getLocation(), name, 1f, 1f);
                 }
-            }.runTaskTimer(MetadataHandler.PLUGIN, 0, durationTicks);
+            }.runAtFixedRate(MetadataHandler.PLUGIN, 1, durationTicks);
         }
         //case for a song with a transition
         else {
             player.playSound(player.getLocation(), name, 1f, 1f);
-            songTask = new BukkitRunnable() {
+            songTask = new FoliaRunnable(player.getScheduler(), null) {
                 @Override
                 public void run() {
                     if (contentType == ContentType.BOSS && !customBossEntity.exists() ||
@@ -192,7 +194,7 @@ public class CustomMusic {
                     }
                     player.playSound(player.getLocation(), name2, 1f, 1f);
                 }
-            }.runTaskTimer(MetadataHandler.PLUGIN, durationTicks, durationTicks2);
+            }.runAtFixedRate(MetadataHandler.PLUGIN, durationTicks, durationTicks2);
         }
 
         players.put(player, this);
@@ -214,12 +216,12 @@ public class CustomMusic {
                 return;
             }
             //Wait for a second after teleporting, just to make sure
-            new BukkitRunnable() {
+            new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                 @Override
                 public void run() {
                     customMusic.play(event.getPlayer());
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, 20);
+            }.runDelayed(MetadataHandler.PLUGIN, 20);
         }
 
         @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
@@ -232,12 +234,12 @@ public class CustomMusic {
                 return;
             }
             //Wait for a second after teleporting, just to make sure
-            new BukkitRunnable() {
+            new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                 @Override
                 public void run() {
                     customMusic.play(event.getPlayer());
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, 20);
+            }.runDelayed(MetadataHandler.PLUGIN, 20);
         }
     }
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/RegionalBossEntity.java b/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/RegionalBossEntity.java
index 937ac223..f3772c0c 100644
--- a/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/RegionalBossEntity.java
+++ b/src/main/java/com/magmaguy/elitemobs/mobconstructor/custombosses/RegionalBossEntity.java
@@ -14,7 +14,9 @@ import com.magmaguy.elitemobs.mobconstructor.custombosses.transitiveblocks.Trans
 import com.magmaguy.elitemobs.pathfinding.Navigation;
 import com.magmaguy.elitemobs.powers.SpiritWalk;
 import com.magmaguy.elitemobs.utils.ConfigurationLocation;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Logger;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import lombok.Getter;
 import lombok.Setter;
 import org.bukkit.Bukkit;
@@ -28,6 +30,7 @@ import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Objects;
+import java.util.concurrent.TimeUnit;
 
 public class RegionalBossEntity extends CustomBossEntity implements PersistentObject, PersistentMovingEntity {
 
@@ -41,7 +44,7 @@ public class RegionalBossEntity extends CustomBossEntity implements PersistentOb
     private long unixRespawnTime;
     private int respawnCoolDownInMinutes = -1;
     private boolean isRespawning = false;
-    private BukkitTask leashTask;
+    private ScheduledTask leashTask;
     @Getter
     @Setter
     private List<TransitiveBlock> onSpawnTransitiveBlocks;
@@ -50,7 +53,7 @@ public class RegionalBossEntity extends CustomBossEntity implements PersistentOb
     private List<TransitiveBlock> onRemoveTransitiveBlocks;
     @Getter
     private boolean removed = false;
-    private BukkitTask respawnTask = null;
+    private ScheduledTask respawnTask = null;
 
     public RegionalBossEntity(CustomBossesConfigFields customBossesConfigFields, String rawString) {
         super(customBossesConfigFields);
@@ -122,12 +125,12 @@ public class RegionalBossEntity extends CustomBossEntity implements PersistentOb
     }
 
     public static void regionalDataSaver() {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getAsyncScheduler(), TimeUnit.MILLISECONDS) {
             @Override
             public void run() {
                 save();
             }
-        }.runTaskTimerAsynchronously(MetadataHandler.PLUGIN, 20L * 5, 20L * 5);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 20L * 5*50, 20L * 5*50);
     }
 
     public static void save() {
@@ -191,7 +194,7 @@ public class RegionalBossEntity extends CustomBossEntity implements PersistentOb
     public void queueSpawn(boolean silent) {
         RegionalBossEntity regionalBossEntity = this;
         this.isRespawning = true;
-        respawnTask = new BukkitRunnable() {
+        respawnTask = new FoliaRunnable(regionalBossEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 if (phaseBossEntity != null) phaseBossEntity.silentReset();
@@ -200,7 +203,7 @@ public class RegionalBossEntity extends CustomBossEntity implements PersistentOb
                 regionalBossEntity.spawn(silent);
                 regionalBossEntity.getDamagers().clear();
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, ticksBeforeRespawn);
+        }.runDelayed(MetadataHandler.PLUGIN, ticksBeforeRespawn);
     }
 
     public void forceRespawn() {
@@ -229,7 +232,7 @@ public class RegionalBossEntity extends CustomBossEntity implements PersistentOb
             return;
         RegionalBossEntity regionalBossEntity = this;
         if (leashTask != null) leashTask.cancel();
-        leashTask = Bukkit.getScheduler().runTaskTimerAsynchronously(MetadataHandler.PLUGIN, () -> {
+        leashTask = Bukkit.getAsyncScheduler().runAtFixedRate(MetadataHandler.PLUGIN, (scheduledTask) -> {
             try {
                 if (!isValid()) {
                     cancelLeash();
@@ -241,7 +244,7 @@ public class RegionalBossEntity extends CustomBossEntity implements PersistentOb
                 ex.printStackTrace();
                 Logger.warn("Async leash task errored!");
             }
-        }, 20L * 3, 20L * 3);
+        }, 20L * 3 * 50, 20L * 3 * 50, TimeUnit.MILLISECONDS);
     }
 
     private void cancelLeash() {
diff --git a/src/main/java/com/magmaguy/elitemobs/npcs/NPCEntity.java b/src/main/java/com/magmaguy/elitemobs/npcs/NPCEntity.java
index 0b800b5a..d44263d6 100644
--- a/src/main/java/com/magmaguy/elitemobs/npcs/NPCEntity.java
+++ b/src/main/java/com/magmaguy/elitemobs/npcs/NPCEntity.java
@@ -16,6 +16,7 @@ import com.magmaguy.elitemobs.thirdparty.libsdisguises.DisguiseEntity;
 import com.magmaguy.elitemobs.thirdparty.worldguard.WorldGuardSpawnEventBypasser;
 import com.magmaguy.elitemobs.utils.ChunkLocationChecker;
 import com.magmaguy.elitemobs.utils.ConfigurationLocation;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.NonSolidBlockTypes;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import com.magmaguy.magmacore.util.Logger;
@@ -296,22 +297,22 @@ public class NPCEntity implements PersistentObject, PersistentMovingEntity {
      */
     public void startTalkingCooldown() {
         this.isTalking = true;
-        new BukkitRunnable() {
+        new FoliaRunnable(this.villager.getScheduler(), null) {
             @Override
             public void run() {
                 isTalking = false;
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 20 * 3L);
+        }.runDelayed(MetadataHandler.PLUGIN, 20 * 3L);
     }
 
     public void setTimeout() {
         if (npCsConfigFields.getTimeout() <= 0) return;
-        new BukkitRunnable() {
+        new FoliaRunnable(this.villager.getScheduler(), null) {
             @Override
             public void run() {
                 remove(RemovalReason.NPC_TIMEOUT);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, (long) (npCsConfigFields.getTimeout() * 20 * 60));
+        }.runDelayed(MetadataHandler.PLUGIN, (long) (npCsConfigFields.getTimeout() * 20 * 60));
     }
 
     /**
diff --git a/src/main/java/com/magmaguy/elitemobs/npcs/NPCInteractions.java b/src/main/java/com/magmaguy/elitemobs/npcs/NPCInteractions.java
index e9723135..2eb549d0 100644
--- a/src/main/java/com/magmaguy/elitemobs/npcs/NPCInteractions.java
+++ b/src/main/java/com/magmaguy/elitemobs/npcs/NPCInteractions.java
@@ -7,6 +7,7 @@ import com.magmaguy.elitemobs.entitytracker.EntityTracker;
 import com.magmaguy.elitemobs.menus.*;
 import com.magmaguy.elitemobs.playerdata.database.PlayerData;
 import com.magmaguy.elitemobs.quests.QuestInteractionHandler;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import com.magmaguy.magmacore.util.Logger;
 import org.bukkit.Bukkit;
@@ -32,7 +33,7 @@ public class NPCInteractions implements Listener {
 
         if (cooldowns.contains(event.getPlayer())) return;
         cooldowns.add(event.getPlayer());
-        Bukkit.getScheduler().runTaskLater(MetadataHandler.PLUGIN, () -> cooldowns.remove(event.getPlayer()), 1);
+        event.getPlayer().getScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> cooldowns.remove(event.getPlayer()), null, 1);
         if (event.isCancelled()) return;
 
         NPCEntity npcEntity = EntityTracker.getNPCEntity(event.getRightClicked());
@@ -48,12 +49,12 @@ public class NPCInteractions implements Listener {
         switch (npcEntity.getNPCsConfigFields().getInteractionType()) {
             case GUILD_GREETER:
                 if (event.getPlayer().hasPermission("elitemobs.rank.npc")) {
-                    new BukkitRunnable() {
+                    new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                         @Override
                         public void run() {
                             GuildRankMenuHandler.initializeGuildRankMenu(event.getPlayer());
                         }
-                    }.runTaskLater(MetadataHandler.PLUGIN, 1);
+                    }.runDelayed(MetadataHandler.PLUGIN, 1);
                 }
                 break;
             case CHAT:
@@ -61,31 +62,31 @@ public class NPCInteractions implements Listener {
                 break;
             case CUSTOM_SHOP:
                 if (event.getPlayer().hasPermission("elitemobs.shop.custom.npc"))
-                    new BukkitRunnable() {
+                    new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                         @Override
                         public void run() {
                             CustomShopMenu.customShopInitializer(event.getPlayer());
                         }
-                    }.runTaskLater(MetadataHandler.PLUGIN, 1);
+                    }.runDelayed(MetadataHandler.PLUGIN, 1);
 
                 break;
             case PROCEDURALLY_GENERATED_SHOP:
                 if (event.getPlayer().hasPermission("elitemobs.shop.dynamic.npc"))
-                    new BukkitRunnable() {
+                    new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                         @Override
                         public void run() {
                             ProceduralShopMenu.shopInitializer(event.getPlayer());
                         }
-                    }.runTaskLater(MetadataHandler.PLUGIN, 1);
+                    }.runDelayed(MetadataHandler.PLUGIN, 1);
                 break;
             case QUEST_GIVER:
                 if (event.getPlayer().hasPermission("elitemobs.quest.npc"))
-                    new BukkitRunnable() {
+                    new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                         @Override
                         public void run() {
                             QuestInteractionHandler.processDynamicQuests(event.getPlayer(), npcEntity);
                         }
-                    }.runTaskLater(MetadataHandler.PLUGIN, 1);
+                    }.runDelayed(MetadataHandler.PLUGIN, 1);
                 break;
             case CUSTOM_QUEST_GIVER:
                 QuestInteractionHandler.processNPCQuests(event.getPlayer(), npcEntity);
@@ -95,13 +96,13 @@ public class NPCInteractions implements Listener {
                 break;
             case SELL:
                 if (event.getPlayer().hasPermission("elitemobs.shop.sell.npc"))
-                    new BukkitRunnable() {
+                    new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                         @Override
                         public void run() {
                             SellMenu sellMenu = new SellMenu();
                             sellMenu.constructSellMenu(event.getPlayer());
                         }
-                    }.runTaskLater(MetadataHandler.PLUGIN, 1);
+                    }.runDelayed(MetadataHandler.PLUGIN, 1);
                 break;
             case TELEPORT_BACK:
                 if (event.getPlayer().hasPermission("elitemobs.back.npc")) {
@@ -115,45 +116,45 @@ public class NPCInteractions implements Listener {
                 break;
             case SCRAPPER:
                 if (event.getPlayer().hasPermission("elitemobs.scrap.npc")) {
-                    new BukkitRunnable() {
+                    new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                         @Override
                         public void run() {
                             ScrapperMenu scrapperMenu = new ScrapperMenu();
                             scrapperMenu.constructScrapMenu(event.getPlayer());
                         }
-                    }.runTaskLater(MetadataHandler.PLUGIN, 1);
+                    }.runDelayed(MetadataHandler.PLUGIN, 1);
                 }
                 break;
             case REPAIRMAN:
                 if (event.getPlayer().hasPermission("elitemobs.repair.npc")) {
-                    new BukkitRunnable() {
+                    new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                         @Override
                         public void run() {
                             RepairMenu repairMenu = new RepairMenu();
                             repairMenu.constructRepairMenu(event.getPlayer());
                         }
-                    }.runTaskLater(MetadataHandler.PLUGIN, 1);
+                    }.runDelayed(MetadataHandler.PLUGIN, 1);
                 }
                 break;
             case UNBINDER:
                 if (event.getPlayer().hasPermission("elitemobs.unbind.npc")) {
-                    new BukkitRunnable() {
+                    new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                         @Override
                         public void run() {
                             UnbindMenu unbindMenu = new UnbindMenu();
                             unbindMenu.constructUnbinderMenu(event.getPlayer());
                         }
-                    }.runTaskLater(MetadataHandler.PLUGIN, 1);
+                    }.runDelayed(MetadataHandler.PLUGIN, 1);
                 }
                 break;
             case ARENA_MASTER:
-                new BukkitRunnable() {
+                new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                     @Override
                     public void run() {
                         ArenaMenu arenaMenu = new ArenaMenu();
                         arenaMenu.constructArenaMenu(event.getPlayer(), npcEntity.getNPCsConfigFields().getArenaFilename());
                     }
-                }.runTaskLater(MetadataHandler.PLUGIN, 1);
+                }.runDelayed(MetadataHandler.PLUGIN, 1);
                 break;
             case NONE:
             default:
@@ -163,12 +164,12 @@ public class NPCInteractions implements Listener {
                     Logger.warn("Failed to run NPC command because none is configured for " + npcEntity.getNPCsConfigFields().getFilename());
                     return;
                 }
-                new BukkitRunnable() {
+                new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                     @Override
                     public void run() {
                         event.getPlayer().performCommand(npcEntity.getNPCsConfigFields().getCommand());
                     }
-                }.runTaskLater(MetadataHandler.PLUGIN, 1);
+                }.runDelayed(MetadataHandler.PLUGIN, 1);
                 break;
             case ENHANCER:
             case REFINER:
@@ -180,12 +181,12 @@ public class NPCInteractions implements Listener {
                 break;
             case ENCHANTER:
                 if (event.getPlayer().hasPermission("elitemobs.enchant.npc"))
-                    new BukkitRunnable() {
+                    new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                         @Override
                         public void run() {
                             new ItemEnchantmentMenu(event.getPlayer());
                         }
-                    }.runTaskLater(MetadataHandler.PLUGIN, 1);
+                    }.runDelayed(MetadataHandler.PLUGIN, 1);
                 break;
         }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/npcs/chatter/NPCChatBubble.java b/src/main/java/com/magmaguy/elitemobs/npcs/chatter/NPCChatBubble.java
index d0c13efa..59930df2 100644
--- a/src/main/java/com/magmaguy/elitemobs/npcs/chatter/NPCChatBubble.java
+++ b/src/main/java/com/magmaguy/elitemobs/npcs/chatter/NPCChatBubble.java
@@ -2,6 +2,7 @@ package com.magmaguy.elitemobs.npcs.chatter;
 
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.npcs.NPCEntity;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.VisualDisplay;
 import org.bukkit.Location;
 import org.bukkit.entity.Player;
@@ -34,7 +35,7 @@ public class NPCChatBubble {
 
             TextDisplay visualArmorStand = VisualDisplay.generateTemporaryTextDisplay(newLocation, substring);
 
-            new BukkitRunnable() {
+            new FoliaRunnable(npcEntity.getVillager().getScheduler(), null) {
                 int counter = 0;
 
                 @Override
@@ -47,7 +48,7 @@ public class NPCChatBubble {
                     visualArmorStand.teleport(visualArmorStand.getLocation().clone().add(new Vector(0, 0.005, 0)));
                     counter++;
                 }
-            }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+            }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
             lineCounter++;
 
diff --git a/src/main/java/com/magmaguy/elitemobs/npcs/chatter/NPCProximitySensor.java b/src/main/java/com/magmaguy/elitemobs/npcs/chatter/NPCProximitySensor.java
index 1389aa01..9fea044d 100644
--- a/src/main/java/com/magmaguy/elitemobs/npcs/chatter/NPCProximitySensor.java
+++ b/src/main/java/com/magmaguy/elitemobs/npcs/chatter/NPCProximitySensor.java
@@ -9,6 +9,7 @@ import com.magmaguy.elitemobs.playerdata.database.PlayerData;
 import com.magmaguy.elitemobs.quests.CustomQuest;
 import com.magmaguy.elitemobs.quests.DynamicQuest;
 import com.magmaguy.elitemobs.quests.Quest;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.VisualDisplay;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -32,7 +33,7 @@ public class NPCProximitySensor implements Listener {
     private static final HashSet<Player> nearbyPlayers = new HashSet<>();
 
     public NPCProximitySensor() {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
 
             @Override
             public void run() {
@@ -61,7 +62,7 @@ public class NPCProximitySensor implements Listener {
 
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 20L * 5L);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 20L * 5L);
 
     }
 
@@ -141,7 +142,7 @@ public class NPCProximitySensor implements Listener {
         TextDisplay visualArmorStand = VisualDisplay.generateTemporaryTextDisplay(newLocation, messageUp);
         AtomicInteger counter = new AtomicInteger();
         AtomicBoolean up = new AtomicBoolean(true);
-        Bukkit.getScheduler().runTaskTimer(MetadataHandler.PLUGIN, task -> {
+        player.getScheduler().runAtFixedRate(MetadataHandler.PLUGIN, task -> {
             if (!player.isValid() ||
                     npcEntity.getVillager() == null ||
                     !npcEntity.getVillager().isValid() ||
@@ -164,7 +165,7 @@ public class NPCProximitySensor implements Listener {
 
             visualArmorStand.teleport(visualArmorStand.getLocation().clone().add(new Vector(0, up.get() ? 0.01 : -0.01, 0)));
 
-        }, 0L, 1L);
+        }, null, 0L, 1L);
     }
 
     @EventHandler
diff --git a/src/main/java/com/magmaguy/elitemobs/pathfinding/Navigation.java b/src/main/java/com/magmaguy/elitemobs/pathfinding/Navigation.java
index f9599c61..716d7816 100644
--- a/src/main/java/com/magmaguy/elitemobs/pathfinding/Navigation.java
+++ b/src/main/java/com/magmaguy/elitemobs/pathfinding/Navigation.java
@@ -8,6 +8,8 @@ import com.magmaguy.elitemobs.entitytracker.EntityTracker;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.RegionalBossEntity;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import org.bukkit.Location;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.entity.Creature;
@@ -21,7 +23,7 @@ import java.util.HashMap;
 
 public class Navigation implements Listener {
 
-    private static final HashMap<CustomBossEntity, BukkitTask> currentlyNavigating = new HashMap();
+    private static final HashMap<CustomBossEntity, ScheduledTask> currentlyNavigating = new HashMap();
 
     public static void addSoftLeashAI(RegionalBossEntity regionalBossEntity) {
         if (NMSManager.getAdapter() == null) return;
@@ -61,7 +63,7 @@ public class Navigation implements Listener {
     }
 
     public static void shutdown() {
-        currentlyNavigating.values().forEach(BukkitTask::cancel);
+        currentlyNavigating.values().forEach(ScheduledTask::cancel);
         currentlyNavigating.clear();
     }
 
@@ -74,7 +76,7 @@ public class Navigation implements Listener {
         Double finalSpeed = speed;
         if (currentlyNavigating.get(customBossEntity) != null) currentlyNavigating.get(customBossEntity).cancel();
         int finalDuration = duration;
-        currentlyNavigating.put(customBossEntity, new BukkitRunnable() {
+        currentlyNavigating.put(customBossEntity, new FoliaRunnable(customBossEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -92,7 +94,7 @@ public class Navigation implements Listener {
                 NMSManager.getAdapter().move(customBossEntity.getLivingEntity(), finalSpeed.floatValue(), destination);
                 counter++;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1));
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1));
     }
 
     @EventHandler(ignoreCancelled = true)
diff --git a/src/main/java/com/magmaguy/elitemobs/playerdata/ElitePlayerInventory.java b/src/main/java/com/magmaguy/elitemobs/playerdata/ElitePlayerInventory.java
index 033f5c98..58463403 100644
--- a/src/main/java/com/magmaguy/elitemobs/playerdata/ElitePlayerInventory.java
+++ b/src/main/java/com/magmaguy/elitemobs/playerdata/ElitePlayerInventory.java
@@ -102,7 +102,7 @@ public class ElitePlayerInventory {
 
     private boolean updateLock() {
         isUpdateLock = true;
-        Bukkit.getScheduler().runTaskLater(MetadataHandler.PLUGIN, () -> isUpdateLock = false, 1);
+        player.getScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> isUpdateLock = false, null, 1);
         return true;
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/playerdata/database/PlayerData.java b/src/main/java/com/magmaguy/elitemobs/playerdata/database/PlayerData.java
index 5686ed26..8f53c14c 100644
--- a/src/main/java/com/magmaguy/elitemobs/playerdata/database/PlayerData.java
+++ b/src/main/java/com/magmaguy/elitemobs/playerdata/database/PlayerData.java
@@ -7,6 +7,7 @@ import com.magmaguy.elitemobs.quests.CustomQuest;
 import com.magmaguy.elitemobs.quests.Quest;
 import com.magmaguy.elitemobs.quests.playercooldowns.PlayerQuestCooldowns;
 import com.magmaguy.elitemobs.utils.ConfigurationLocation;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.ObjectSerializer;
 import com.magmaguy.magmacore.util.Logger;
 import lombok.Getter;
@@ -30,6 +31,7 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.UUID;
+import java.util.concurrent.TimeUnit;
 
 public class PlayerData {
 
@@ -94,7 +96,7 @@ public class PlayerData {
         }
         PermissionAttachment permissionAttachment = player.addAttachment(MetadataHandler.PLUGIN);
         permissionAttachment.setPermission("elitequest.*", false);
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getAsyncScheduler(), null) {
             @Override
             public void run() {
                 Statement statement = null;
@@ -121,7 +123,7 @@ public class PlayerData {
                     Logger.warn(e.getClass().getName() + ": " + e.getMessage());
                 }
             }
-        }.runTaskAsynchronously(MetadataHandler.PLUGIN);
+        }.run(MetadataHandler.PLUGIN);
     }
 
     public static PlayerData getPlayerData(UUID player) {
@@ -329,7 +331,7 @@ public class PlayerData {
     }
 
     public static void setDatabaseValue(UUID uuid, String key, Object value) {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getAsyncScheduler(), null) {
             @Override
             public void run() {
                 Statement statement = null;
@@ -350,7 +352,7 @@ public class PlayerData {
                     e.printStackTrace();
                 }
             }
-        }.runTaskAsynchronously(MetadataHandler.PLUGIN);
+        }.run(MetadataHandler.PLUGIN);
     }
 
     private static Object getDatabaseBlob(UUID uuid, String value) {
@@ -702,24 +704,24 @@ public class PlayerData {
     public static class PlayerDataEvents implements Listener {
         @EventHandler(priority = EventPriority.LOWEST)
         public void onPlayerLogin(PlayerJoinEvent event) {
-            new BukkitRunnable() {
+            new FoliaRunnable(Bukkit.getAsyncScheduler(), TimeUnit.MILLISECONDS) {
                 @Override
                 public void run() {
                     if (Bukkit.getPlayer(event.getPlayer().getUniqueId()) == null) return;
                     new PlayerData(event.getPlayer().getUniqueId());
                 }
-            }.runTaskLaterAsynchronously(MetadataHandler.PLUGIN, 20);
+            }.runDelayed(MetadataHandler.PLUGIN, 20 * 50);
         }
 
         @EventHandler
         public void onPlayerLogout(PlayerQuitEvent event) {
-            new BukkitRunnable() {
+            new FoliaRunnable(Bukkit.getAsyncScheduler(), TimeUnit.MILLISECONDS) {
                 @Override
                 public void run() {
                     clearPlayerData(event.getPlayer().getUniqueId());
                     setDisplayName(event.getPlayer().getUniqueId(), event.getPlayer().getName());
                 }
-            }.runTaskLaterAsynchronously(MetadataHandler.PLUGIN, 20);
+            }.runDelayed(MetadataHandler.PLUGIN, 20 * 50);
         }
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/ArrowFireworks.java b/src/main/java/com/magmaguy/elitemobs/powers/ArrowFireworks.java
index fb5bd284..cb068a77 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/ArrowFireworks.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/ArrowFireworks.java
@@ -5,6 +5,7 @@ import com.magmaguy.elitemobs.api.EliteMobDamagedByPlayerEvent;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.MinorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.NonSolidBlockTypes;
 import org.bukkit.Location;
 import org.bukkit.Particle;
@@ -51,7 +52,7 @@ public class ArrowFireworks extends MinorPower implements Listener {
             rocketArrow.setGravity(false);
             rocketArrow.setGlowing(true);
 
-            new BukkitRunnable() {
+            new FoliaRunnable(rocketArrow.getScheduler(), null) {
                 int counter = 0;
 
                 @Override
@@ -82,7 +83,7 @@ public class ArrowFireworks extends MinorPower implements Listener {
 
 
                 }
-            }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+            }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
         }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/ArrowRain.java b/src/main/java/com/magmaguy/elitemobs/powers/ArrowRain.java
index 2acb1c38..b31afdfd 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/ArrowRain.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/ArrowRain.java
@@ -5,6 +5,7 @@ import com.magmaguy.elitemobs.api.EliteMobDamagedByPlayerEvent;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.MinorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.entity.Arrow;
 import org.bukkit.entity.EntityType;
@@ -23,7 +24,7 @@ public class ArrowRain extends MinorPower implements Listener {
     }
 
     public static void doArrowRain(EliteEntity eliteEntity) {
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             final Location initialLocation = eliteEntity.getLivingEntity().getLocation().clone();
             int counter = 0;
 
@@ -46,7 +47,7 @@ public class ArrowRain extends MinorPower implements Listener {
                 if (counter > 20)
                     doArrows(eliteEntity.getLivingEntity().getLocation().clone().add(new Vector(0, 10, 0)), eliteEntity);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private static void doArrows(Location location, EliteEntity eliteEntity) {
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/AttackArrow.java b/src/main/java/com/magmaguy/elitemobs/powers/AttackArrow.java
index 904b82c8..ceb57f29 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/AttackArrow.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/AttackArrow.java
@@ -6,6 +6,7 @@ import com.magmaguy.elitemobs.combatsystem.EliteProjectile;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.MinorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.GameMode;
 import org.bukkit.entity.*;
 import org.bukkit.event.EventHandler;
@@ -38,7 +39,7 @@ public class AttackArrow extends MinorPower implements Listener {
 
     private void repeatingArrowTask(AttackArrow attackArrow, EliteEntity eliteEntity) {
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
 
             @Override
             public void run() {
@@ -58,7 +59,7 @@ public class AttackArrow extends MinorPower implements Listener {
 
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 20 * 8);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 20 * 8);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/AttackFireball.java b/src/main/java/com/magmaguy/elitemobs/powers/AttackFireball.java
index c8d7261e..ff7fd404 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/AttackFireball.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/AttackFireball.java
@@ -5,6 +5,7 @@ import com.magmaguy.elitemobs.api.EliteMobTargetPlayerEvent;
 import com.magmaguy.elitemobs.combatsystem.EliteProjectile;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.powers.meta.MinorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.GameMode;
 import org.bukkit.entity.*;
 import org.bukkit.event.EventHandler;
@@ -44,7 +45,7 @@ public class AttackFireball extends MinorPower implements Listener {
 
     private void repeatingFireballTask(Monster monster, AttackFireball attackFireball) {
 
-        new BukkitRunnable() {
+        new FoliaRunnable(monster.getScheduler(), null) {
 
             @Override
             public void run() {
@@ -63,7 +64,7 @@ public class AttackFireball extends MinorPower implements Listener {
 
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 20L * 8);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 20L * 8);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/AttackLightning.java b/src/main/java/com/magmaguy/elitemobs/powers/AttackLightning.java
index bd2b87d3..42c2d10e 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/AttackLightning.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/AttackLightning.java
@@ -6,6 +6,8 @@ import com.magmaguy.elitemobs.collateralminecraftchanges.LightningSpawnBypass;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.MinorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
+import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.entity.Entity;
@@ -38,7 +40,7 @@ public class AttackLightning extends MinorPower implements Listener {
     }
 
     public void lightningTask(Location location) {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getRegionScheduler(), location) {
             int counter = 0;
 
             @Override
@@ -52,7 +54,7 @@ public class AttackLightning extends MinorPower implements Listener {
                 }
                 location.getWorld().spawnParticle(Particle.CRIT, location, 10, 0.5, 1.5, 0.5, 0.3);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/BulletHell.java b/src/main/java/com/magmaguy/elitemobs/powers/BulletHell.java
index 26d0e1bc..3193877c 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/BulletHell.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/BulletHell.java
@@ -8,6 +8,7 @@ import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.entitytracker.EntityTracker;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.GameMode;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -29,7 +30,7 @@ public class BulletHell extends BossPower implements Listener {
     }
 
     private static void trackingArrowLoop(Player player, Arrow arrow) {
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -51,7 +52,7 @@ public class BulletHell extends BossPower implements Listener {
                 }
                 counter++;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private static Vector arrowAdjustmentVector(Arrow arrow, Player player) {
@@ -74,7 +75,7 @@ public class BulletHell extends BossPower implements Listener {
         eliteEntity.getLivingEntity().setAI(false);
         if (eliteEntity.getLivingEntity().getLocation().clone().add(new Vector(0, 10, 0)).getBlock().getType().equals(Material.AIR))
             eliteEntity.getLivingEntity().teleport(eliteEntity.getLivingEntity().getLocation().clone().add(new Vector(0, 10, 0)));
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             final Location initialLocation = eliteEntity.getLivingEntity().getLocation().clone();
             int counter = 0;
 
@@ -105,7 +106,7 @@ public class BulletHell extends BossPower implements Listener {
                 }
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 10);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 10);
     }
 
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/ChannelHealing.java b/src/main/java/com/magmaguy/elitemobs/powers/ChannelHealing.java
index 45fe6873..8d38e94a 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/ChannelHealing.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/ChannelHealing.java
@@ -5,6 +5,7 @@ import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.entitytracker.EntityTracker;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.CombatEnterScanPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.entity.Entity;
@@ -19,7 +20,7 @@ public class ChannelHealing extends CombatEnterScanPower {
 
     @Override
     protected void finishActivation(EliteEntity eliteEntity) {
-        super.bukkitTask = new BukkitRunnable() {
+        super.bukkitTask = new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
 
             @Override
             public void run() {
@@ -28,7 +29,7 @@ public class ChannelHealing extends CombatEnterScanPower {
                 }
                 doPower(eliteEntity);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 20 * 2);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 20 * 2);
     }
 
     private void doPower(EliteEntity eliteEntity) {
@@ -47,7 +48,7 @@ public class ChannelHealing extends CombatEnterScanPower {
         super.setInCooldown(healer, true);
         healer.getLivingEntity().setAI(false);
         damagedEntity.setHealing(true);
-        new BukkitRunnable() {
+        new FoliaRunnable(healer.getLivingEntity().getScheduler(), null) {
             int timer = 0;
 
             @Override
@@ -87,7 +88,7 @@ public class ChannelHealing extends CombatEnterScanPower {
                 timer++;
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0L, 2L);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1L, 2L);
     }
 
     @Override
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/DeathSlice.java b/src/main/java/com/magmaguy/elitemobs/powers/DeathSlice.java
index 119a4243..77bb9348 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/DeathSlice.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/DeathSlice.java
@@ -8,6 +8,7 @@ import com.magmaguy.elitemobs.events.BossCustomAttackDamage;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
 import com.magmaguy.elitemobs.powerstances.GenericRotationMatrixMath;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.entity.Entity;
@@ -29,7 +30,7 @@ public class DeathSlice extends BossPower implements Listener {
     private static void doDeathSlice(EliteEntity eliteEntity) {
         ArrayList<Location> locations = raytracedLocationList(eliteEntity.getLivingEntity().getLocation());
         eliteEntity.getLivingEntity().setAI(false);
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -51,7 +52,7 @@ public class DeathSlice extends BossPower implements Listener {
 
                 counter++;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 2);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 2);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonArrowBombardment.java b/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonArrowBombardment.java
index 85274e8e..780ea9b4 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonArrowBombardment.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonArrowBombardment.java
@@ -5,6 +5,7 @@ import com.magmaguy.elitemobs.combatsystem.EliteProjectile;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.Bombardment;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Projectile;
@@ -34,12 +35,12 @@ public class EnderDragonArrowBombardment extends Bombardment {
                 Projectile arrow = EliteProjectile.create(EntityType.ARROW, eliteEntity.getLivingEntity(), shotVector, false);
 
                 //anti-lag measure, culls arrows after 4 seconds
-                new BukkitRunnable() {
+                new FoliaRunnable(arrow.getScheduler(), null) {
                     @Override
                     public void run() {
                         arrow.remove();
                     }
-                }.runTaskLater(MetadataHandler.PLUGIN, 20L * 4);
+                }.runDelayed(MetadataHandler.PLUGIN, 20L * 4);
             }
     }
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonDiscoFireballs.java b/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonDiscoFireballs.java
index 68136c38..f0324952 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonDiscoFireballs.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonDiscoFireballs.java
@@ -7,6 +7,7 @@ import com.magmaguy.elitemobs.entitytracker.EntityTracker;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.CombatEnterScanPower;
 import com.magmaguy.elitemobs.utils.EnderDragonPhaseSimplifier;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.entity.EnderDragon;
@@ -32,7 +33,7 @@ public class EnderDragonDiscoFireballs extends CombatEnterScanPower {
 
     @Override
     protected void finishActivation(EliteEntity eliteEntity) {
-        super.bukkitTask = new BukkitRunnable() {
+        super.bukkitTask = new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 if (doExit(eliteEntity) || isInCooldown(eliteEntity)) {
@@ -45,7 +46,7 @@ public class EnderDragonDiscoFireballs extends CombatEnterScanPower {
 
                 doPower(eliteEntity);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 10);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 10);
     }
 
     @Override
@@ -56,7 +57,7 @@ public class EnderDragonDiscoFireballs extends CombatEnterScanPower {
     private void doPower(EliteEntity eliteEntity) {
         doCooldown(eliteEntity);
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -93,7 +94,7 @@ public class EnderDragonDiscoFireballs extends CombatEnterScanPower {
 
                 counter++;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private void generateLocations() {
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonEmpoweredLightning.java b/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonEmpoweredLightning.java
index 051b7740..5e64c9bc 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonEmpoweredLightning.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonEmpoweredLightning.java
@@ -25,14 +25,14 @@ import java.util.concurrent.ThreadLocalRandom;
 public class EnderDragonEmpoweredLightning extends MajorPower {
 
     private boolean isActive = false;
-    private BukkitTask bukkitTask = null;
+    private io.papermc.paper.threadedregions.scheduler.ScheduledTask bukkitTask = null;
 
     public EnderDragonEmpoweredLightning() {
         super(PowersConfig.getPower("ender_dragon_empowered_lightning.yml"));
     }
 
     public static void lightningTask(Location location) {
-        new BukkitRunnable() {
+        new com.magmaguy.elitemobs.utils.FoliaRunnable(org.bukkit.Bukkit.getRegionScheduler(), location) {
             int counter = 0;
 
             @Override
@@ -52,7 +52,7 @@ public class EnderDragonEmpoweredLightning extends MajorPower {
                 }
                 location.getWorld().spawnParticle(Particle.SOUL_FIRE_FLAME, location, 10, 0.5, 1.5, 0.5, 0.3);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
     }
 
@@ -62,7 +62,7 @@ public class EnderDragonEmpoweredLightning extends MajorPower {
 
         isActive = true;
 
-        bukkitTask = new BukkitRunnable() {
+        bukkitTask = new com.magmaguy.elitemobs.utils.FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 if (!eliteEntity.isValid()) {
@@ -72,7 +72,7 @@ public class EnderDragonEmpoweredLightning extends MajorPower {
                 if (isInCooldown(eliteEntity)) return;
                 fireLightning(eliteEntity);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 20);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 20);
 
     }
 
@@ -94,12 +94,12 @@ public class EnderDragonEmpoweredLightning extends MajorPower {
             Location randomLocation = locationRandomizer(eliteEntity.getLivingEntity().getLocation(), 0);
             if (randomLocation == null) continue;
 
-            new BukkitRunnable() {
+            new com.magmaguy.elitemobs.utils.FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
                 @Override
                 public void run() {
                     lightningTask(randomLocation);
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, ThreadLocalRandom.current().nextInt(20 * 5));
+            }.runDelayed(MetadataHandler.PLUGIN, ThreadLocalRandom.current().nextInt(20 * 5));
 
         }
     }
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonShockwave.java b/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonShockwave.java
index f8ec5b57..d8593ade 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonShockwave.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonShockwave.java
@@ -7,6 +7,7 @@ import com.magmaguy.elitemobs.explosionregen.Explosion;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.CombatEnterScanPower;
 import com.magmaguy.elitemobs.utils.EnderDragonPhaseSimplifier;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.block.Block;
@@ -38,7 +39,7 @@ public class EnderDragonShockwave extends CombatEnterScanPower {
 
     @Override
     protected void finishActivation(EliteEntity eliteEntity) {
-        super.bukkitTask = new BukkitRunnable() {
+        super.bukkitTask = new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
 
             @Override
             public void run() {
@@ -54,13 +55,13 @@ public class EnderDragonShockwave extends CombatEnterScanPower {
                 doPower(eliteEntity);
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 10);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 10);
     }
 
     private void doPower(EliteEntity eliteEntity) {
         doCooldown(eliteEntity);
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -97,7 +98,7 @@ public class EnderDragonShockwave extends CombatEnterScanPower {
 
                 counter++;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     //todo: move this to its own class, make sure it only generates once ever and then just randomizes rotations
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonTornado.java b/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonTornado.java
index 2275bd81..56e063f5 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonTornado.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/EnderDragonTornado.java
@@ -7,6 +7,7 @@ import com.magmaguy.elitemobs.explosionregen.Explosion;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.CombatEnterScanPower;
 import com.magmaguy.elitemobs.utils.EnderDragonPhaseSimplifier;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.block.Block;
@@ -32,7 +33,7 @@ public class EnderDragonTornado extends CombatEnterScanPower {
 
     @Override
     protected void finishActivation(EliteEntity eliteEntity) {
-        super.bukkitTask = new BukkitRunnable() {
+        super.bukkitTask = new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
 
             @Override
             public void run() {
@@ -48,7 +49,7 @@ public class EnderDragonTornado extends CombatEnterScanPower {
                 doPower(eliteEntity);
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 10);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 10);
     }
 
     private void doPower(EliteEntity eliteEntity) {
@@ -59,7 +60,7 @@ public class EnderDragonTornado extends CombatEnterScanPower {
                 .toLocation(eliteEntity.getLivingEntity().getWorld());
 
         tornadoSpeed = tornadoEye.clone().subtract(eliteEntity.getLivingEntity().getLocation()).toVector().setY(0).normalize().multiply(0.2);
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -92,7 +93,7 @@ public class EnderDragonTornado extends CombatEnterScanPower {
 
                 counter++;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private void doTornadoParticles() {
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/Firestorm.java b/src/main/java/com/magmaguy/elitemobs/powers/Firestorm.java
index 2e778393..59d1711b 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/Firestorm.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/Firestorm.java
@@ -6,6 +6,7 @@ import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.events.BossCustomAttackDamage;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.entity.Entity;
@@ -26,7 +27,7 @@ public class Firestorm extends BossPower implements Listener {
     private static void doFirestorm(EliteEntity eliteEntity) {
         if (eliteEntity == null || !eliteEntity.isValid()) return;
         eliteEntity.getLivingEntity().setAI(false);
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -49,14 +50,14 @@ public class Firestorm extends BossPower implements Listener {
                     doFlamePyrePhase1(randomLocation, eliteEntity);
                 }
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     /**
      * Warning phase
      */
     private static void doFlamePyrePhase1(Location location, EliteEntity eliteEntity) {
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -67,7 +68,7 @@ public class Firestorm extends BossPower implements Listener {
                 cancel();
                 doFlamePyrePhase2(location, eliteEntity);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private static void spawnPhase1Particle(Location location, Particle particle) {
@@ -85,7 +86,7 @@ public class Firestorm extends BossPower implements Listener {
      * First damage phase
      */
     private static void doFlamePyrePhase2(Location location, EliteEntity eliteEntity) {
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -98,7 +99,7 @@ public class Firestorm extends BossPower implements Listener {
                 cancel();
                 doFlamePyrePhase3(location, eliteEntity);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private static void spawnPhase2Particle(Location location, Particle particle) {
@@ -122,7 +123,7 @@ public class Firestorm extends BossPower implements Listener {
      * Second damage phase / last warning phase
      */
     private static void doFlamePyrePhase3(Location location, EliteEntity eliteEntity) {
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -135,7 +136,7 @@ public class Firestorm extends BossPower implements Listener {
                 cancel();
                 doFlamePyrePhase4(location, eliteEntity);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private static void spawnPhase3Particle(Location location, Particle particle) {
@@ -148,7 +149,7 @@ public class Firestorm extends BossPower implements Listener {
      * @param eliteEntity
      */
     private static void doFlamePyrePhase4(Location location, EliteEntity eliteEntity) {
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -159,7 +160,7 @@ public class Firestorm extends BossPower implements Listener {
                 if (counter < 20 * 2) return;
                 cancel();
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     @EventHandler
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/FireworksBarrage.java b/src/main/java/com/magmaguy/elitemobs/powers/FireworksBarrage.java
index 43daabd1..50a6ddf2 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/FireworksBarrage.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/FireworksBarrage.java
@@ -7,6 +7,7 @@ import com.magmaguy.elitemobs.config.powers.PowersConfigFields;
 import com.magmaguy.elitemobs.explosionregen.Explosion;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.*;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Entity;
@@ -33,7 +34,7 @@ public class FireworksBarrage extends BossPower {
         if (eliteEntity.getLivingEntity().getLocation().clone().add(new Vector(0, 10, 0)).getBlock().getType().equals(Material.AIR))
             if (!eliteEntity.getLivingEntity().getType().equals(EntityType.GHAST))
                 eliteEntity.getLivingEntity().teleport(eliteEntity.getLivingEntity().getLocation().clone().add(new Vector(0, 10, 0)));
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             final Location initialLocation = eliteEntity.getLivingEntity().getLocation().clone();
             int counter = 0;
 
@@ -82,7 +83,7 @@ public class FireworksBarrage extends BossPower {
                 }
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 10);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 10);
     }
 
     public static class FireworksBarrageEvents implements Listener {
@@ -100,7 +101,7 @@ public class FireworksBarrage extends BossPower {
 
     private class FireworkTask {
         public FireworkTask(Firework firework, Location targetLocation, EliteEntity eliteEntity) {
-            new BukkitRunnable() {
+            new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
                 int counter = 0;
 
                 @Override
@@ -120,7 +121,7 @@ public class FireworksBarrage extends BossPower {
                         Explosion.generateFakeExplosion(blockList, eliteEntity.getLivingEntity(), (PowersConfigFields) getPowersConfigFields(), firework.getLocation());
                     }
                 }
-            }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+            }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
         }
     }
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/FlamePyre.java b/src/main/java/com/magmaguy/elitemobs/powers/FlamePyre.java
index f086a02e..b1669f98 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/FlamePyre.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/FlamePyre.java
@@ -6,6 +6,7 @@ import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.events.BossCustomAttackDamage;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.entity.Entity;
@@ -40,7 +41,7 @@ public class FlamePyre extends BossPower implements Listener {
      */
     private void doFlamePyrePhase1(EliteEntity eliteEntity) {
         eliteEntity.getLivingEntity().setAI(false);
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -55,7 +56,7 @@ public class FlamePyre extends BossPower implements Listener {
                 cancel();
                 doFlamePyrePhase2(eliteEntity);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private void spawnPhase1Particle(Location location, Particle particle) {
@@ -73,7 +74,7 @@ public class FlamePyre extends BossPower implements Listener {
      * First damage phase
      */
     private void doFlamePyrePhase2(EliteEntity eliteEntity) {
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -90,7 +91,7 @@ public class FlamePyre extends BossPower implements Listener {
                 cancel();
                 doFlamePyrePhase3(eliteEntity);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private void spawnPhase2Particle(Location location, Particle particle) {
@@ -116,7 +117,7 @@ public class FlamePyre extends BossPower implements Listener {
      * @param eliteEntity
      */
     private void doFlamePyrePhase3(EliteEntity eliteEntity) {
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -133,7 +134,7 @@ public class FlamePyre extends BossPower implements Listener {
                 cancel();
                 doFlamePyrePhase4(eliteEntity);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private void spawnPhase3Particle(Location location, Particle particle) {
@@ -144,7 +145,7 @@ public class FlamePyre extends BossPower implements Listener {
      * Final/full damage phase
      */
     private void doFlamePyrePhase4(EliteEntity eliteEntity) {
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -160,7 +161,7 @@ public class FlamePyre extends BossPower implements Listener {
                 cancel();
                 eliteEntity.getLivingEntity().setAI(true);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/Flamethrower.java b/src/main/java/com/magmaguy/elitemobs/powers/Flamethrower.java
index 58555011..f4edf3c6 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/Flamethrower.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/Flamethrower.java
@@ -6,6 +6,7 @@ import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.events.BossCustomAttackDamage;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.entity.Entity;
@@ -53,7 +54,7 @@ public class Flamethrower extends BossPower implements Listener {
 
         eliteEntity.getLivingEntity().setAI(false);
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -73,7 +74,7 @@ public class Flamethrower extends BossPower implements Listener {
 
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
     }
 
@@ -111,7 +112,7 @@ public class Flamethrower extends BossPower implements Listener {
      */
     private void doFlamethrowerPhase2(EliteEntity eliteEntity, Location fixedPlayerLocation) {
         List<Location> damagePoints = generateDamagePoints(eliteEntity, fixedPlayerLocation);
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int timer = 0;
 
             @Override
@@ -128,7 +129,7 @@ public class Flamethrower extends BossPower implements Listener {
                 doFlamethrowerPhase3(eliteEntity, fixedPlayerLocation);
                 cancel();
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     /**
@@ -137,7 +138,7 @@ public class Flamethrower extends BossPower implements Listener {
      * @param eliteEntity
      */
     private void doFlamethrowerPhase3(EliteEntity eliteEntity, Location fixedPlayerLocation) {
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int timer = 0;
 
             @Override
@@ -152,7 +153,7 @@ public class Flamethrower extends BossPower implements Listener {
                 cancel();
                 eliteEntity.getLivingEntity().setAI(true);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/FrostCone.java b/src/main/java/com/magmaguy/elitemobs/powers/FrostCone.java
index f7970bb4..3832ff5d 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/FrostCone.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/FrostCone.java
@@ -8,6 +8,7 @@ import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
 import com.magmaguy.elitemobs.powers.meta.ProjectileTagger;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
@@ -42,7 +43,7 @@ public class FrostCone extends BossPower implements Listener {
             return;
         eliteEntity.getLivingEntity().setAI(false);
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -69,7 +70,7 @@ public class FrostCone extends BossPower implements Listener {
                     createSnowball(eliteEntity, damager);
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
 
     }
@@ -108,7 +109,7 @@ public class FrostCone extends BossPower implements Listener {
         Projectile snowball = EliteProjectile.create(EntityType.SNOWBALL, eliteEntity.getLivingEntity(), getShotVector(eliteEntity, location), false);
         ProjectileTagger.tagProjectileWithCustomDamage(snowball, 2);
         snowball.getPersistentDataContainer().set(frostConeSnowballKey, PersistentDataType.STRING, "true");
-        Bukkit.getScheduler().runTaskLater(MetadataHandler.PLUGIN, snowball::remove, 20L * 3);
+        snowball.getScheduler().runDelayed(MetadataHandler.PLUGIN, scheduledTask -> snowball.remove(), null, 20L * 3);
         return (Snowball) snowball;
     }
 
@@ -133,7 +134,7 @@ public class FrostCone extends BossPower implements Listener {
         else
             frostconePlayer.put(event.getPlayer(), frostconePlayer.get(event.getPlayer()) + 1);
         event.getPlayer().addPotionEffect(new PotionEffect(PotionEffectType.SLOWNESS, 20 * 7, frostconePlayer.get(event.getPlayer())));
-        new BukkitRunnable() {
+        new FoliaRunnable(event.getPlayer().getScheduler(), null) {
             final int amount = frostconePlayer.get(event.getPlayer());
 
             @Override
@@ -142,7 +143,7 @@ public class FrostCone extends BossPower implements Listener {
                 if (amount != frostconePlayer.get(event.getPlayer())) return;
                 frostconePlayer.remove(event.getPlayer());
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 20L * 5);
+        }.runDelayed(MetadataHandler.PLUGIN, 20L * 5);
     }
 
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/FrostWalker.java b/src/main/java/com/magmaguy/elitemobs/powers/FrostWalker.java
index 6de6226d..fcc1e8df 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/FrostWalker.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/FrostWalker.java
@@ -3,6 +3,7 @@ package com.magmaguy.elitemobs.powers;
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.powers.meta.MinorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Material;
 import org.bukkit.enchantments.Enchantment;
 import org.bukkit.entity.LivingEntity;
@@ -17,7 +18,7 @@ public class FrostWalker extends MinorPower {
 
     @Override
     public void applyPowers(LivingEntity livingEntity) {
-        new BukkitRunnable() {
+        new FoliaRunnable(livingEntity.getScheduler(),null) {
             @Override
             public void run() {
                 ItemStack frostWalkerBoots = new ItemStack(Material.LEATHER_BOOTS);
@@ -25,7 +26,7 @@ public class FrostWalker extends MinorPower {
                 frostWalkerBoots.addEnchantment(Enchantment.DEPTH_STRIDER, 3);
                 livingEntity.getEquipment().setBoots(frostWalkerBoots);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 1);
+        }.runDelayed(MetadataHandler.PLUGIN, 1);
     }
 
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/GoldExplosion.java b/src/main/java/com/magmaguy/elitemobs/powers/GoldExplosion.java
index 1cad9a8f..fad61bb7 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/GoldExplosion.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/GoldExplosion.java
@@ -6,6 +6,7 @@ import com.magmaguy.elitemobs.config.MobCombatSettingsConfig;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ItemStackGenerator;
 import org.bukkit.Material;
 import org.bukkit.Particle;
@@ -42,7 +43,7 @@ public class GoldExplosion extends BossPower implements Listener {
 
         eliteEntity.getLivingEntity().setAI(false);
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -62,7 +63,7 @@ public class GoldExplosion extends BossPower implements Listener {
                 List<Item> goldNuggets = generateVisualItems(eliteEntity);
                 ProjectileDamage.doGoldNuggetDamage(goldNuggets, eliteEntity);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/GoldShotgun.java b/src/main/java/com/magmaguy/elitemobs/powers/GoldShotgun.java
index fbdbc838..cd3086ef 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/GoldShotgun.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/GoldShotgun.java
@@ -5,6 +5,7 @@ import com.magmaguy.elitemobs.api.EliteMobDamagedByPlayerEvent;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ItemStackGenerator;
 import org.bukkit.Material;
 import org.bukkit.Particle;
@@ -42,7 +43,7 @@ public class GoldShotgun extends BossPower implements Listener {
         eliteEntity.getLivingEntity().setAI(false);
         Vector shotVector = player.getLocation().add(new Vector(0, 1, 0)).toVector().subtract(eliteEntity.getLivingEntity().getLocation().toVector()).normalize().multiply(.5);
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -67,7 +68,7 @@ public class GoldShotgun extends BossPower implements Listener {
 
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/GroundPound.java b/src/main/java/com/magmaguy/elitemobs/powers/GroundPound.java
index b6037fe7..9277caf2 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/GroundPound.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/GroundPound.java
@@ -5,6 +5,7 @@ import com.magmaguy.elitemobs.api.EliteMobDamagedByPlayerEvent;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.MinorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.NonSolidBlockTypes;
 import org.bukkit.Location;
 import org.bukkit.Particle;
@@ -49,7 +50,7 @@ public class GroundPound extends MinorPower implements Listener {
     public void doGroundPound(EliteEntity eliteEntity) {
 
         //step 1: make boss go up
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 if (!eliteEntity.isValid()) {
@@ -60,10 +61,10 @@ public class GroundPound extends MinorPower implements Listener {
                 cloudParticle(eliteEntity.getLivingEntity().getLocation());
 
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 1);
+        }.runDelayed(MetadataHandler.PLUGIN, 1);
 
         //step 2: make boss go down
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -78,7 +79,7 @@ public class GroundPound extends MinorPower implements Listener {
                     eliteEntity.getLivingEntity().setVelocity(new Vector(0, -2, 0));
                     cloudParticle(eliteEntity.getLivingEntity().getLocation());
 
-                    new BukkitRunnable() {
+                    new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
                         int counter = 0;
 
                         @Override
@@ -109,7 +110,7 @@ public class GroundPound extends MinorPower implements Listener {
 
 
                         }
-                    }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+                    }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
                     cancel();
                     return;
@@ -120,7 +121,7 @@ public class GroundPound extends MinorPower implements Listener {
                     cancel();
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 20, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 20, 1);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/Implosion.java b/src/main/java/com/magmaguy/elitemobs/powers/Implosion.java
index 501fad51..dae305e1 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/Implosion.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/Implosion.java
@@ -7,6 +7,7 @@ import com.magmaguy.elitemobs.entitytracker.EntityTracker;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.powers.meta.MinorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.GameMode;
 import org.bukkit.Particle;
 import org.bukkit.entity.Entity;
@@ -27,7 +28,7 @@ public class Implosion extends MinorPower implements Listener {
     public void onDeath(EliteMobDeathEvent event) {
         if (!event.getEliteEntity().hasPower(this)) return;
 
-        new BukkitRunnable() {
+        new FoliaRunnable(event.getEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -55,7 +56,7 @@ public class Implosion extends MinorPower implements Listener {
                 }
                 counter++;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 1, 0);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 0);
     }
 
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/InvulnerabilityKnockback.java b/src/main/java/com/magmaguy/elitemobs/powers/InvulnerabilityKnockback.java
index fa28d471..b8ba9c0b 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/InvulnerabilityKnockback.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/InvulnerabilityKnockback.java
@@ -5,6 +5,7 @@ import com.magmaguy.elitemobs.api.EliteMobDamagedEvent;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.powers.meta.MinorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.scheduler.BukkitRunnable;
@@ -26,13 +27,13 @@ public class InvulnerabilityKnockback extends MinorPower implements Listener {
                         ((CustomBossEntity) event.getEliteEntity()).getCustomBossesConfigFields().isFrozen()) {
             if (!event.getEliteEntity().isValid()) return;
             event.getEntity().setVelocity(new Vector(0, 0, 0));
-            new BukkitRunnable() {
+            new FoliaRunnable(event.getEntity().getScheduler(), null) {
                 @Override
                 public void run() {
                     if (!event.getEliteEntity().isValid()) return;
                     event.getEntity().setVelocity(new Vector(0, 0, 0));
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, 1);
+            }.runDelayed(MetadataHandler.PLUGIN, 1);
         }
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/LightningBolts.java b/src/main/java/com/magmaguy/elitemobs/powers/LightningBolts.java
index 4d660b16..858ece02 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/LightningBolts.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/LightningBolts.java
@@ -6,6 +6,8 @@ import com.magmaguy.elitemobs.collateralminecraftchanges.LightningSpawnBypass;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
+import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.entity.Entity;
@@ -38,17 +40,17 @@ public class LightningBolts extends BossPower implements Listener {
                 }
             }
         }
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 if (eliteEntity != null && eliteEntity.getLivingEntity() != null)
                     eliteEntity.getLivingEntity().setAI(true);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 4L * 20);
+        }.runDelayed(MetadataHandler.PLUGIN, 4L * 20);
     }
 
     public static void lightningTask(Location location, int counter) {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getRegionScheduler(), location) {
             int counter = 0;
 
             @Override
@@ -62,7 +64,7 @@ public class LightningBolts extends BossPower implements Listener {
                 }
                 location.getWorld().spawnParticle(Particle.CRIT, location, 10, 0.5, 1.5, 0.5, 0.3);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, counter * 5L, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, counter * 5L, 1);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/MeteorShower.java b/src/main/java/com/magmaguy/elitemobs/powers/MeteorShower.java
index 5e17c1eb..9a6853ef 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/MeteorShower.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/MeteorShower.java
@@ -5,6 +5,7 @@ import com.magmaguy.elitemobs.api.EliteMobDamagedByPlayerEvent;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.entity.EntityType;
@@ -23,7 +24,7 @@ public class MeteorShower extends BossPower implements Listener {
 
     public static void doMeteorShower(EliteEntity eliteEntity) {
         eliteEntity.getLivingEntity().setAI(false);
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             final Location initialLocation = eliteEntity.getLivingEntity().getLocation().clone();
             int counter = 0;
 
@@ -53,7 +54,7 @@ public class MeteorShower extends BossPower implements Listener {
                 }
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     public static void doCloudEffect(Location location) {
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/MovementSpeed.java b/src/main/java/com/magmaguy/elitemobs/powers/MovementSpeed.java
index 529f1f15..7ebffd8d 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/MovementSpeed.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/MovementSpeed.java
@@ -3,6 +3,7 @@ package com.magmaguy.elitemobs.powers;
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.powers.meta.MinorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
@@ -19,12 +20,12 @@ public class MovementSpeed extends MinorPower {
 
     @Override
     public void applyPowers(LivingEntity livingEntity) {
-        new BukkitRunnable() {
+        new FoliaRunnable(livingEntity.getScheduler(), null) {
             @Override
             public void run() {
                 livingEntity.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, 100000, 1));
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 1);
+        }.runDelayed(MetadataHandler.PLUGIN, 1);
     }
 
 }
\ No newline at end of file
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/PhotonRay.java b/src/main/java/com/magmaguy/elitemobs/powers/PhotonRay.java
index 6ca9a72a..61962f1a 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/PhotonRay.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/PhotonRay.java
@@ -5,6 +5,7 @@ import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.events.BossCustomAttackDamage;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.CombatEnterScanPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Logger;
 import org.bukkit.Color;
 import org.bukkit.GameMode;
@@ -44,7 +45,7 @@ public class PhotonRay extends CombatEnterScanPower {
 
     @Override
     protected void finishActivation(EliteEntity eliteEntity) {
-        super.bukkitTask = new BukkitRunnable() {
+        super.bukkitTask = new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 if (doExit(eliteEntity) || isInCooldown(eliteEntity)) {
@@ -52,7 +53,7 @@ public class PhotonRay extends CombatEnterScanPower {
                 }
                 doPower(eliteEntity);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private void doPower(EliteEntity eliteEntity) {
@@ -69,7 +70,7 @@ public class PhotonRay extends CombatEnterScanPower {
     private void createRay(Player target, Location sourceLocation, EliteEntity sourceEntity) {
         sourceEntity.getLivingEntity().setAI(false);
 
-        new BukkitRunnable() {
+        new FoliaRunnable(sourceEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
             Vector laserVector = generateRayVector(sourceLocation, target.getLocation());
 
@@ -93,7 +94,7 @@ public class PhotonRay extends CombatEnterScanPower {
                 counter++;
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 2);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 2);
     }
 
     private void doRaytraceLaser(Vector laserVector, Location source, boolean warningPhase, EliteEntity eliteEntity) {
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/PlasmaBlaster.java b/src/main/java/com/magmaguy/elitemobs/powers/PlasmaBlaster.java
index de4b19d1..d2d6bd53 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/PlasmaBlaster.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/PlasmaBlaster.java
@@ -4,6 +4,7 @@ import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.CombatEnterScanPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Color;
 import org.bukkit.GameMode;
 import org.bukkit.Location;
@@ -26,7 +27,7 @@ public class PlasmaBlaster extends CombatEnterScanPower {
 
     @Override
     protected void finishActivation(EliteEntity eliteEntity) {
-        super.bukkitTask = new BukkitRunnable() {
+        super.bukkitTask = new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 if (doExit(eliteEntity) || isInCooldown(eliteEntity)) {
@@ -34,7 +35,7 @@ public class PlasmaBlaster extends CombatEnterScanPower {
                 }
                 doPower(eliteEntity);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 20 * 4);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 20 * 4);
     }
 
     private void doPower(EliteEntity eliteEntity) {
@@ -48,7 +49,7 @@ public class PlasmaBlaster extends CombatEnterScanPower {
     }
 
     private void createProjectile(Vector shotVector, Location sourceLocation, EliteEntity sourceEntity, Player player) {
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             final Location currentLocation = sourceLocation.clone().add(new Vector(0, 1, 0));
             int counter = 0;
 
@@ -68,7 +69,7 @@ public class PlasmaBlaster extends CombatEnterScanPower {
                 currentLocation.add(shotVector);
                 if (!currentLocation.getBlock().isPassable()) cancel();
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private void doDamage(Player player, EliteEntity sourceEntity) {
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/ProjectileDamage.java b/src/main/java/com/magmaguy/elitemobs/powers/ProjectileDamage.java
index 3e50dec9..6a7712e1 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/ProjectileDamage.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/ProjectileDamage.java
@@ -4,6 +4,7 @@ import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.entitytracker.EntityTracker;
 import com.magmaguy.elitemobs.events.BossCustomAttackDamage;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Item;
 import org.bukkit.entity.LivingEntity;
@@ -17,7 +18,7 @@ public class ProjectileDamage {
 
     public static void doGoldNuggetDamage(List<Item> goldNuggets, EliteEntity eliteEntity) {
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
 
             int timer = 0;
 
@@ -67,7 +68,7 @@ public class ProjectileDamage {
 
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/ShieldWall.java b/src/main/java/com/magmaguy/elitemobs/powers/ShieldWall.java
index 07a235de..50e043e5 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/ShieldWall.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/ShieldWall.java
@@ -199,7 +199,7 @@ public class ShieldWall extends MinorPower {
     }
 
     private void armorStandTracker(EliteEntity eliteEntity) {
-        Bukkit.getScheduler().runTaskTimer(MetadataHandler.PLUGIN, (task) -> {
+        eliteEntity.getLivingEntity().getScheduler().runAtFixedRate(MetadataHandler.PLUGIN, (task) -> {
             if (!eliteEntity.isValid() || (northHealthPool == 0 && southHealthPool == 0 && eastHealthPool == 0 && westHealthPool == 0) || !isActive) {
                 task.cancel();
                 setActive(false);
@@ -244,7 +244,7 @@ public class ShieldWall extends MinorPower {
                 task.cancel();
                 setActive(false);
             }
-        }, 1, 1);
+        }, null, 1, 1);
     }
 
     private enum Direction {
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/SkeletonPillar.java b/src/main/java/com/magmaguy/elitemobs/powers/SkeletonPillar.java
index 6961ce96..76bee1ad 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/SkeletonPillar.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/SkeletonPillar.java
@@ -5,6 +5,8 @@ import com.magmaguy.elitemobs.api.EliteMobDamagedByPlayerEvent;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.powers.meta.MajorPower;
 import com.magmaguy.elitemobs.powerstances.GenericRotationMatrixMath;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
+import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.Sound;
@@ -43,7 +45,7 @@ public class SkeletonPillar extends MajorPower implements Listener {
         Location location2 = event.getEliteMobEntity().getLivingEntity().getLocation().clone()
                 .add(locationMover(event.getEliteMobEntity().getLivingEntity().getLocation().clone(), 20, -7));
 
-        new BukkitRunnable() {
+        new FoliaRunnable(event.getEliteMobEntity().getLivingEntity().getScheduler(), null) {
 
             int timer = 1;
 
@@ -72,7 +74,7 @@ public class SkeletonPillar extends MajorPower implements Listener {
 
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
     }
 
@@ -106,7 +108,7 @@ public class SkeletonPillar extends MajorPower implements Listener {
 
     private void playPillarSong(Location location) {
         soundLocation = location;
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getRegionScheduler(), location) {
             int counter = 0;
 
             @Override
@@ -252,7 +254,7 @@ public class SkeletonPillar extends MajorPower implements Listener {
                         break;
                 }
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 1, 2);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 2);
     }
 
     private void playSound(float pitch) {
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/SkeletonTrackingArrow.java b/src/main/java/com/magmaguy/elitemobs/powers/SkeletonTrackingArrow.java
index f0e83baf..ca89ba9a 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/SkeletonTrackingArrow.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/SkeletonTrackingArrow.java
@@ -5,6 +5,7 @@ import com.magmaguy.elitemobs.api.EliteMobTargetPlayerEvent;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.MajorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.GameMode;
 import org.bukkit.Particle;
 import org.bukkit.entity.Arrow;
@@ -22,7 +23,7 @@ public class SkeletonTrackingArrow extends MajorPower implements Listener {
     }
 
     private static void trackingArrowLoop(Player player, Arrow arrow) {
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -42,7 +43,7 @@ public class SkeletonTrackingArrow extends MajorPower implements Listener {
                 }
                 counter++;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private static Vector arrowAdjustmentVector(Arrow arrow, Player player) {
@@ -60,7 +61,7 @@ public class SkeletonTrackingArrow extends MajorPower implements Listener {
     }
 
     private void repeatingTrackingArrowTask(EliteEntity eliteEntity, SkeletonTrackingArrow skeletonTrackingArrow) {
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
 
             @Override
             public void run() {
@@ -80,7 +81,7 @@ public class SkeletonTrackingArrow extends MajorPower implements Listener {
                         }
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 20 * 8);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 20 * 8);
     }
 
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/SpiritWalk.java b/src/main/java/com/magmaguy/elitemobs/powers/SpiritWalk.java
index f8b08436..c92e101a 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/SpiritWalk.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/SpiritWalk.java
@@ -10,6 +10,7 @@ import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.RegionalBossEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -42,7 +43,7 @@ public class SpiritWalk extends BossPower implements Listener {
         Vector toDestination = finalLocation.clone().subtract(entityLocation.clone()).toVector().normalize().divide(new Vector(2, 2, 2));
         eliteEntity.setCombatGracePeriod(20 * 20);
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
 
             int counter = 0;
 
@@ -70,12 +71,12 @@ public class SpiritWalk extends BossPower implements Listener {
 
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
     }
 
     public static void spiritWalkRegionalBossAnimation(EliteEntity eliteEntity, Location entityLocation, Location finalLocation) {
-        Bukkit.getScheduler().runTask(MetadataHandler.PLUGIN, bukkitTask -> {
+        eliteEntity.getLivingEntity().getScheduler().run(MetadataHandler.PLUGIN, bukkitTask -> {
                     if (eliteEntity.getLivingEntity() == null) return;
                     eliteEntity.getLivingEntity().setAI(false);
                     eliteEntity.getLivingEntity().setInvulnerable(true);
@@ -92,7 +93,7 @@ public class SpiritWalk extends BossPower implements Listener {
                             vehicle.remove();
                     }
 
-                    new BukkitRunnable() {
+                    new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
                         final Entity vehicle = eliteEntity.getLivingEntity().getVehicle();
 
                         int counter = 0;
@@ -126,13 +127,13 @@ public class SpiritWalk extends BossPower implements Listener {
                                     }
 
                                     vehicle.setInvulnerable(false);
-                                    new BukkitRunnable() {
+                                    new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
                                         @Override
                                         public void run() {
                                             PreventMountExploit.bypass = true;
                                             vehicle.addPassenger(eliteEntity.getLivingEntity());
                                         }
-                                    }.runTaskLater(MetadataHandler.PLUGIN, 1);
+                                    }.runDelayed(MetadataHandler.PLUGIN, 1);
                                 }
                                 cancel();
 
@@ -152,10 +153,10 @@ public class SpiritWalk extends BossPower implements Listener {
 
                         }
 
-                    }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+                    }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
                 }
 
-        );
+        , null);
 
     }
 
@@ -201,7 +202,7 @@ public class SpiritWalk extends BossPower implements Listener {
     }
 
     public void initializeSpiritWalk(EliteEntity eliteEntity) {
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
 
             int counter = 1;
 
@@ -239,7 +240,7 @@ public class SpiritWalk extends BossPower implements Listener {
 
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/SummonEmbers.java b/src/main/java/com/magmaguy/elitemobs/powers/SummonEmbers.java
index 894b4ef5..fdf049a1 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/SummonEmbers.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/SummonEmbers.java
@@ -6,6 +6,7 @@ import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.event.EventHandler;
@@ -34,7 +35,7 @@ public class SummonEmbers extends BossPower implements Listener {
 
     private void doSummonParticles(EliteEntity eliteEntity) {
         eliteEntity.getLivingEntity().setAI(false);
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -51,7 +52,7 @@ public class SummonEmbers extends BossPower implements Listener {
                 doSummon(eliteEntity);
                 eliteEntity.getLivingEntity().setAI(true);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/SummonTheReturned.java b/src/main/java/com/magmaguy/elitemobs/powers/SummonTheReturned.java
index 7e807103..71fdbebe 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/SummonTheReturned.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/SummonTheReturned.java
@@ -6,6 +6,7 @@ import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Logger;
 import org.bukkit.Location;
 import org.bukkit.Particle;
@@ -36,7 +37,7 @@ public class SummonTheReturned extends BossPower implements Listener {
 
     private void doSummonParticles(EliteEntity eliteEntity) {
         eliteEntity.getLivingEntity().setAI(false);
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -53,7 +54,7 @@ public class SummonTheReturned extends BossPower implements Listener {
                 doSummon(eliteEntity);
                 eliteEntity.getLivingEntity().setAI(true);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/Taunt.java b/src/main/java/com/magmaguy/elitemobs/powers/Taunt.java
index 94fd0b00..3fc5c224 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/Taunt.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/Taunt.java
@@ -10,6 +10,7 @@ import com.magmaguy.elitemobs.config.powers.premade.TauntConfig;
 import com.magmaguy.elitemobs.entitytracker.EntityTracker;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.MinorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.LivingEntity;
@@ -42,7 +43,7 @@ public class Taunt extends MinorPower implements Listener {
         int randomizedKey = ThreadLocalRandom.current().nextInt(list.size());
         String tempName = list.get(randomizedKey);
         entity.setCustomName(ChatColorConverter.convert(tempName));
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
 
             @Override
             public void run() {
@@ -52,7 +53,7 @@ public class Taunt extends MinorPower implements Listener {
             }
 
 
-        }.runTaskLater(MetadataHandler.PLUGIN, 4 * 20L);
+        }.runDelayed(MetadataHandler.PLUGIN, 4 * 20L);
     }
 
     /**
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/Taze.java b/src/main/java/com/magmaguy/elitemobs/powers/Taze.java
index 1f28ca29..3ea14e41 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/Taze.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/Taze.java
@@ -4,6 +4,7 @@ import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.api.PlayerDamagedByEliteMobEvent;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.entity.Player;
 import org.bukkit.event.EventHandler;
@@ -32,12 +33,12 @@ public class Taze extends BossPower implements Listener {
         player.setVelocity(player.getLocation().subtract(entityLocation.toVector()).toVector().normalize());
         player.sendTitle("", "Shocked!", 1, 30, 1);
         player.addPotionEffect(new PotionEffect(PotionEffectType.SLOWNESS, 30, 5));
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             @Override
             public void run() {
                 taze(player, entityLocation, counter + 1);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 5);
+        }.runDelayed(MetadataHandler.PLUGIN, 5);
     }
 
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/Thunderstorm.java b/src/main/java/com/magmaguy/elitemobs/powers/Thunderstorm.java
index 2e84df92..e1670dd7 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/Thunderstorm.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/Thunderstorm.java
@@ -6,6 +6,8 @@ import com.magmaguy.elitemobs.collateralminecraftchanges.LightningSpawnBypass;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.meta.BossPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
+import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.entity.Entity;
@@ -26,7 +28,7 @@ public class Thunderstorm extends BossPower implements Listener {
     public static void doThunderstorm(EliteEntity eliteEntity) {
         if (eliteEntity == null || !eliteEntity.getLivingEntity().isValid()) return;
         eliteEntity.getLivingEntity().setAI(false);
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -55,11 +57,11 @@ public class Thunderstorm extends BossPower implements Listener {
                 }
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     public static void lightningTask(Location location) {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getRegionScheduler(), location) {
             int counter = 0;
 
             @Override
@@ -73,7 +75,7 @@ public class Thunderstorm extends BossPower implements Listener {
                 }
                 location.getWorld().spawnParticle(Particle.CRIT, location, 10, 0.5, 1.5, 0.5, 0.3);
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/TrackingFireball.java b/src/main/java/com/magmaguy/elitemobs/powers/TrackingFireball.java
index 37bf93c8..26a81820 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/TrackingFireball.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/TrackingFireball.java
@@ -5,6 +5,7 @@ import com.magmaguy.elitemobs.api.EliteMobTargetPlayerEvent;
 import com.magmaguy.elitemobs.combatsystem.EliteProjectile;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.powers.meta.MajorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.GameMode;
 import org.bukkit.entity.*;
 import org.bukkit.event.EventHandler;
@@ -49,7 +50,7 @@ public class TrackingFireball extends MajorPower {
 
             public TrackingFireballTasks(Monster monster, TrackingFireball trackingFireball) {
 
-                new BukkitRunnable() {
+                new FoliaRunnable(monster.getScheduler(), null) {
 
                     @Override
                     public void run() {
@@ -68,7 +69,7 @@ public class TrackingFireball extends MajorPower {
 
                     }
 
-                }.runTaskTimer(MetadataHandler.PLUGIN, 0, 20 * 8);
+                }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 20 * 8);
 
             }
 
@@ -84,7 +85,7 @@ public class TrackingFireball extends MajorPower {
                     repeatingFireball.setShooter((ProjectileSource) entity);
                     trackingFireballs.put(repeatingFireball.getUniqueId(), this);
 
-                    new BukkitRunnable() {
+                    new FoliaRunnable(entity.getScheduler(), null) {
                         int counter = 0;
 
                         @Override
@@ -108,7 +109,7 @@ public class TrackingFireball extends MajorPower {
                             }
                             counter++;
                         }
-                    }.runTaskTimer(MetadataHandler.PLUGIN, 1, 1);
+                    }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
                 }
 
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/ZombieBloat.java b/src/main/java/com/magmaguy/elitemobs/powers/ZombieBloat.java
index c4ace553..db9821e2 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/ZombieBloat.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/ZombieBloat.java
@@ -5,6 +5,8 @@ import com.magmaguy.elitemobs.api.EliteMobDamagedByPlayerEvent;
 import com.magmaguy.elitemobs.config.MobCombatSettingsConfig;
 import com.magmaguy.elitemobs.config.powers.PowersConfig;
 import com.magmaguy.elitemobs.powers.meta.MajorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
+import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.entity.Entity;
@@ -38,7 +40,7 @@ public class ZombieBloat extends MajorPower implements Listener {
         /*
         Create early warning that entity is about to bloat
          */
-        new BukkitRunnable() {
+        new FoliaRunnable(event.getEntity().getScheduler(), null) {
 
             final LivingEntity eventZombie = (LivingEntity) event.getEntity();
             int timer = 0;
@@ -64,7 +66,7 @@ public class ZombieBloat extends MajorPower implements Listener {
                 timer++;
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     private void bloatEffect(LivingEntity eventZombie) {
@@ -111,7 +113,7 @@ public class ZombieBloat extends MajorPower implements Listener {
         /*
         Effect is done, start task to remove giant
          */
-        new BukkitRunnable() {
+        new FoliaRunnable(eventZombie.getScheduler(), null) {
 
             @Override
             public void run() {
@@ -119,7 +121,7 @@ public class ZombieBloat extends MajorPower implements Listener {
                 eventZombie.setAI(true);
             }
 
-        }.runTaskLater(MetadataHandler.PLUGIN, 10);
+        }.runDelayed(MetadataHandler.PLUGIN, 10);
 
     }
 
@@ -128,7 +130,7 @@ public class ZombieBloat extends MajorPower implements Listener {
         if (!MobCombatSettingsConfig.isEnableWarningVisualEffects())
             return;
 
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             int counter = 0;
 
             @Override
@@ -145,7 +147,7 @@ public class ZombieBloat extends MajorPower implements Listener {
                 counter++;
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/ZombieFriends.java b/src/main/java/com/magmaguy/elitemobs/powers/ZombieFriends.java
index 710bc54c..575d3b54 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/ZombieFriends.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/ZombieFriends.java
@@ -7,6 +7,7 @@ import com.magmaguy.elitemobs.config.powers.premade.ZombieFriendsConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.powers.meta.MajorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
@@ -37,7 +38,7 @@ public class ZombieFriends extends MajorPower implements Listener {
         CustomBossEntity reinforcement2 = CustomBossEntity.createCustomBossEntity("zombie_friends_friend.yml");
         reinforcement2.spawn(event.getEntity().getLocation(), event.getEliteMobEntity().getLevel(), false);
 
-        new BukkitRunnable() {
+        new FoliaRunnable(event.getEliteMobEntity().getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 if (!event.getEliteMobEntity().isValid() || !reinforcement1.isValid() && !reinforcement2.isValid()) {
@@ -78,19 +79,19 @@ public class ZombieFriends extends MajorPower implements Listener {
 
                 }
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 20, 20 * 8);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 20, 20 * 8);
 
     }
 
     private void nameClearer(EliteEntity eliteEntity) {
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 if (eliteEntity.isValid())
                     eliteEntity.setName(eliteEntity.getName(), true);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 20 * 3);
+        }.runDelayed(MetadataHandler.PLUGIN, 20 * 3);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/ZombieNecronomicon.java b/src/main/java/com/magmaguy/elitemobs/powers/ZombieNecronomicon.java
index 058503d2..bd1e8dcb 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/ZombieNecronomicon.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/ZombieNecronomicon.java
@@ -11,6 +11,7 @@ import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.powers.meta.MajorPower;
 import com.magmaguy.elitemobs.powerstances.GenericRotationMatrixMath;
 import com.magmaguy.elitemobs.powerstances.VisualItemInitializer;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Logger;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -64,7 +65,7 @@ public class ZombieNecronomicon extends MajorPower implements Listener {
         if (!MobCombatSettingsConfig.isEnableWarningVisualEffects())
             return;
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             final HashMap<Integer, List<Item>> fourTrack = new HashMap<>();
             int counter = 0;
 
@@ -99,7 +100,7 @@ public class ZombieNecronomicon extends MajorPower implements Listener {
                 counter++;
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 5, 5);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 5, 5);
 
     }
 
@@ -148,7 +149,7 @@ public class ZombieNecronomicon extends MajorPower implements Listener {
 
     private void nameScroller(LivingEntity livingEntity, ZombieNecronomicon zombieNecronomicon) {
 
-        new BukkitRunnable() {
+        new FoliaRunnable(livingEntity.getScheduler(), null) {
             final String fullChant = convert(PowersConfig.getPower("zombie_necronomicon.yml").getFileConfiguration().getString("summoningChant"));
 
             @Override
@@ -167,7 +168,7 @@ public class ZombieNecronomicon extends MajorPower implements Listener {
                 zombieNecronomicon.chantIndex++;
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
 
     }
 
@@ -175,7 +176,7 @@ public class ZombieNecronomicon extends MajorPower implements Listener {
 
         LivingEntity targetter = eliteEntity.getLivingEntity();
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
 
             @Override
             public void run() {
@@ -260,7 +261,7 @@ public class ZombieNecronomicon extends MajorPower implements Listener {
 
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 20 * 3L, 20 * 3L);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 20 * 3L, 20 * 3L);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/ZombieParents.java b/src/main/java/com/magmaguy/elitemobs/powers/ZombieParents.java
index d1de3e26..2dcc43fa 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/ZombieParents.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/ZombieParents.java
@@ -7,6 +7,7 @@ import com.magmaguy.elitemobs.config.powers.premade.ZombieParentsConfig;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.powers.meta.MajorPower;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Logger;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
@@ -24,7 +25,7 @@ public class ZombieParents extends MajorPower implements Listener {
     }
 
     private static void startDialog(CustomBossEntity reinforcementMom, CustomBossEntity reinforcementDad, EliteEntity bossEntity) {
-        new BukkitRunnable() {
+        new FoliaRunnable(bossEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 if (!bossEntity.isValid()) {
@@ -34,7 +35,7 @@ public class ZombieParents extends MajorPower implements Listener {
                     doDialog(reinforcementDad, reinforcementMom, bossEntity);
                 }
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 20, 20L * 8);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 20, 20L * 8);
     }
 
     private static void doDeathMessages(CustomBossEntity reinforcementDad, CustomBossEntity reinforcementMom) {
@@ -73,13 +74,13 @@ public class ZombieParents extends MajorPower implements Listener {
 
     private static void nameClearer(EliteEntity eliteEntity) {
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 if (eliteEntity.isValid())
                     eliteEntity.setName(eliteEntity.getName(), true);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 20L * 3);
+        }.runDelayed(MetadataHandler.PLUGIN, 20L * 3);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/meta/Bombardment.java b/src/main/java/com/magmaguy/elitemobs/powers/meta/Bombardment.java
index 010d9779..377c344f 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/meta/Bombardment.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/meta/Bombardment.java
@@ -6,6 +6,8 @@ import com.magmaguy.elitemobs.api.EliteMobExitCombatEvent;
 import com.magmaguy.elitemobs.config.powers.PowersConfigFields;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.utils.EnderDragonPhaseSimplifier;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import org.bukkit.entity.EnderDragon;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
@@ -23,7 +25,7 @@ public abstract class Bombardment extends MajorPower implements Listener {
     public int firingTimer = 0;
     private boolean isActive = false;
     private boolean firing = false;
-    private BukkitTask task = null;
+    private ScheduledTask task = null;
 
     public Bombardment(PowersConfigFields powersConfigFields) {
         super(powersConfigFields);
@@ -35,7 +37,7 @@ public abstract class Bombardment extends MajorPower implements Listener {
         if (isActive) return;
         isActive = true;
 
-        task = new BukkitRunnable() {
+        task = new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -71,7 +73,7 @@ public abstract class Bombardment extends MajorPower implements Listener {
                 }
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 5);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 5);
     }
 
     public void deactivate() {
@@ -106,7 +108,7 @@ public abstract class Bombardment extends MajorPower implements Listener {
 
         firingTimer = 0;
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
 
             @Override
             public void run() {
@@ -120,7 +122,7 @@ public abstract class Bombardment extends MajorPower implements Listener {
                 taskBehavior(eliteEntity);
 
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     public abstract void taskBehavior(EliteEntity eliteEntity);
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/meta/CombatEnterScanPower.java b/src/main/java/com/magmaguy/elitemobs/powers/meta/CombatEnterScanPower.java
index 3dfdd99a..46be0198 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/meta/CombatEnterScanPower.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/meta/CombatEnterScanPower.java
@@ -4,6 +4,7 @@ import com.magmaguy.elitemobs.api.EliteMobEnterCombatEvent;
 import com.magmaguy.elitemobs.api.EliteMobExitCombatEvent;
 import com.magmaguy.elitemobs.config.powers.PowersConfigFields;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.scheduler.BukkitTask;
@@ -13,7 +14,7 @@ import java.util.HashSet;
 public abstract class CombatEnterScanPower extends MajorPower implements Listener {
 
     public static HashSet<CombatEnterScanPower> combatEnterScanPowers = new HashSet<>();
-    public BukkitTask bukkitTask = null;
+    public ScheduledTask bukkitTask = null;
     private boolean isActive = false;
 
     public CombatEnterScanPower(PowersConfigFields powersConfigFields) {
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/meta/CustomSummonPower.java b/src/main/java/com/magmaguy/elitemobs/powers/meta/CustomSummonPower.java
index dcd16031..2bdf1e6d 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/meta/CustomSummonPower.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/meta/CustomSummonPower.java
@@ -15,7 +15,9 @@ import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEscapeMechanism;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.RegionalBossEntity;
 import com.magmaguy.elitemobs.powers.specialpowers.EnderCrystalLightningRod;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Logger;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
 import org.bukkit.entity.*;
@@ -59,12 +61,12 @@ public class CustomSummonPower extends ElitePower implements Listener {
         return customBossEntity;
     }
 
-    public static BukkitTask summonGlobalReinforcement(CustomBossReinforcement customBossReinforcement, CustomBossEntity summoningEntity) {
+    public static ScheduledTask summonGlobalReinforcement(CustomBossReinforcement customBossReinforcement, CustomBossEntity summoningEntity) {
         if (customBossReinforcement.customSpawn == null || customBossReinforcement.customSpawn.isEmpty()) {
             Logger.warn("Reinforcement for boss " + summoningEntity.getCustomBossesConfigFields().getFilename() + " has an incorrectly configured global reinforcement for " + customBossReinforcement.bossFileName);
             return null;
         }
-        return new BukkitRunnable() {
+        return new FoliaRunnable(summoningEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 if (summoningEntity.getGlobalReinforcementsCount() > 30 * summoningEntity.getSpawnLocation().getWorld().getPlayers().size())
@@ -87,7 +89,7 @@ public class CustomSummonPower extends ElitePower implements Listener {
                     customBossEntity.setSummoningEntity(summoningEntity);
                 }
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 20L * 10);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 20L * 10);
     }
 
     public List<CustomBossReinforcement> getCustomBossReinforcements() {
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/meta/ElitePower.java b/src/main/java/com/magmaguy/elitemobs/powers/meta/ElitePower.java
index c206505e..c8b6f555 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/meta/ElitePower.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/meta/ElitePower.java
@@ -7,9 +7,11 @@ import com.magmaguy.elitemobs.config.CustomConfigFields;
 import com.magmaguy.elitemobs.config.powers.PowersConfigFields;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.scripts.EliteScript;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Logger;
 import lombok.Getter;
 import lombok.Setter;
+import org.bukkit.Bukkit;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.scheduler.BukkitRunnable;
 import org.reflections.Reflections;
@@ -155,12 +157,12 @@ public class ElitePower {
 
         eliteEntity.doGlobalPowerCooldown(globalCooldownTime * 20);
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 powerCooldownActive = false;
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, powerCooldownTime * 20L);
+        }.runDelayed(MetadataHandler.PLUGIN, powerCooldownTime * 20L);
 
     }
 
@@ -169,34 +171,34 @@ public class ElitePower {
         if (globalCooldownTime > 0)
             eliteEntity.doGlobalPowerCooldown(globalCooldownTime);
         if (powerCooldownTime > 0)
-            new BukkitRunnable() {
+            new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
                 @Override
                 public void run() {
                     powerCooldownActive = false;
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, powerCooldownTime);
+            }.runDelayed(MetadataHandler.PLUGIN, powerCooldownTime);
 
     }
 
     protected void doGlobalCooldown(int ticks, EliteEntity eliteEntity) {
         setInGlobalCooldown(true);
         eliteEntity.doCooldown();
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             @Override
             public void run() {
                 setInGlobalCooldown(false);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, ticks);
+        }.runDelayed(MetadataHandler.PLUGIN, ticks);
     }
 
     protected void doGlobalCooldown(int ticks) {
         setInGlobalCooldown(true);
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             @Override
             public void run() {
                 setInGlobalCooldown(false);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, ticks);
+        }.runDelayed(MetadataHandler.PLUGIN, ticks);
     }
 
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/meta/PowerCooldown.java b/src/main/java/com/magmaguy/elitemobs/powers/meta/PowerCooldown.java
index 661b9fbf..9cb303bd 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/meta/PowerCooldown.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/meta/PowerCooldown.java
@@ -17,6 +17,7 @@ package com.magmaguy.elitemobs.powers.meta;
 
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.scheduler.BukkitRunnable;
 
 import java.util.HashSet;
@@ -30,7 +31,7 @@ public class PowerCooldown {
 
         cooldownList.add(eliteMob);
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteMob.getLivingEntity().getScheduler(), null) {
 
             @Override
             public void run() {
@@ -39,7 +40,7 @@ public class PowerCooldown {
 
             }
 
-        }.runTaskLater(MetadataHandler.PLUGIN, duration);
+        }.runDelayed(MetadataHandler.PLUGIN, duration);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/scripts/ScriptAction.java b/src/main/java/com/magmaguy/elitemobs/powers/scripts/ScriptAction.java
index dea4169e..99da7f53 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/scripts/ScriptAction.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/scripts/ScriptAction.java
@@ -13,6 +13,7 @@ import com.magmaguy.elitemobs.playerdata.ElitePlayerInventory;
 import com.magmaguy.elitemobs.powers.meta.CustomSummonPower;
 import com.magmaguy.elitemobs.powers.scripts.caching.ScriptActionBlueprint;
 import com.magmaguy.elitemobs.powers.scripts.enums.ActionType;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import com.magmaguy.magmacore.util.Logger;
 import lombok.Getter;
@@ -127,19 +128,19 @@ public class ScriptAction {
         scriptTargets.cacheTargets(scriptActionData);
         if (blueprint.getWait() > 0) {
             //First wait for allotted amount of time
-            new BukkitRunnable() {
+            new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
                 @Override
                 public void run() {
                     runScriptTask(scriptActionData);
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, blueprint.getWait());
+            }.runDelayed(MetadataHandler.PLUGIN, blueprint.getWait());
         } else runScriptTask(scriptActionData);
     }
 
     private void runScriptTask(ScriptActionData scriptActionData) {
         if (blueprint.getRepeatEvery() > 0)
             //if it's a repeating task, run task repeatedly
-            new BukkitRunnable() {
+            new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
                 int counter = 0;
 
                 @Override
@@ -166,7 +167,7 @@ public class ScriptAction {
                     //Otherwise, run the condition
                     runActions(scriptActionData);
                 }
-            }.runTaskTimer(MetadataHandler.PLUGIN, 0, blueprint.getRepeatEvery());
+            }.runAtFixedRate(MetadataHandler.PLUGIN, 1, blueprint.getRepeatEvery());
         else {
             //Check for blocking conditions
             if (blueprint.getConditionsBlueprint() != null &&
@@ -298,7 +299,7 @@ public class ScriptAction {
             }
             bossBar.addPlayer((Player) iteratedTarget);
             if (blueprint.getDuration() > 0)
-                Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, bossBar::removeAll, blueprint.getDuration());
+                iteratedTarget.getScheduler().runDelayed(MetadataHandler.PLUGIN, scheduledTask -> bossBar.removeAll(), null, blueprint.getDuration());
         });
     }
 
@@ -422,7 +423,7 @@ public class ScriptAction {
         getTargets(scriptActionData).forEach(targetEntity -> {
             targetEntity.setAI(blueprint.getBValue());
             if (blueprint.getDuration() > 0)
-                Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, () -> targetEntity.setAI(!blueprint.getBValue()), blueprint.getDuration());
+                targetEntity.getScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> targetEntity.setAI(!blueprint.getBValue()), null, blueprint.getDuration());
         });
     }
 
@@ -431,7 +432,7 @@ public class ScriptAction {
         getTargets(scriptActionData).forEach(targetEntity -> {
             ((Mob) targetEntity).setAware(blueprint.getBValue());
             if (blueprint.getDuration() > 0)
-                Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, () -> ((Mob) targetEntity).setAware(!blueprint.getBValue()), blueprint.getDuration());
+                targetEntity.getScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> ((Mob) targetEntity).setAware(!blueprint.getBValue()), null, blueprint.getDuration());
         });
 
     }
@@ -444,7 +445,7 @@ public class ScriptAction {
     private void runPush(ScriptActionData scriptActionData) {
         //When players get hit that resets their velocity (by Minecraft) and since this runs before the damage is applied
         //any velocity set here would be cancelled if used in a damage event. To bypass it we just run it a tick later.
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             @Override
             public void run() {
                 getTargets(scriptActionData).forEach(targetEntity -> {
@@ -461,7 +462,7 @@ public class ScriptAction {
                     }
                 });
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 1);
+        }.runDelayed(MetadataHandler.PLUGIN, 1);
     }
 
     private void runSummonReinforcement(ScriptActionData scriptActionData) {
@@ -540,7 +541,7 @@ public class ScriptAction {
                     invulnerablePlayers.remove(player);
             }
             if (blueprint.getDuration() > 0)
-                Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, () -> targetEntity.setInvulnerable(!blueprint.isInvulnerable()), blueprint.getDuration());
+                targetEntity.getScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> targetEntity.setInvulnerable(!blueprint.isInvulnerable()), null, blueprint.getDuration());
         });
     }
 
@@ -553,9 +554,9 @@ public class ScriptAction {
                 ElitePlayerInventory.getPlayer(player).addTags(blueprint.getTags());
             if (blueprint.getDuration() > 0) {
                 if (bossEntity != null)
-                    Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, () -> bossEntity.removeTags(blueprint.getTags()), blueprint.getDuration());
+                    bossEntity.getLivingEntity().getScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> bossEntity.removeTags(blueprint.getTags()), null, blueprint.getDuration());
                 if (targetEntity instanceof Player player && ElitePlayerInventory.getPlayer(player) != null)
-                    Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, () -> ElitePlayerInventory.getPlayer(player).removeTags(blueprint.getTags()), blueprint.getDuration());
+                    player.getScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> ElitePlayerInventory.getPlayer(player).removeTags(blueprint.getTags()), null, blueprint.getDuration());
             }
         });
     }
@@ -569,9 +570,9 @@ public class ScriptAction {
                 ElitePlayerInventory.getPlayer(player).removeTags(blueprint.getTags());
             if (blueprint.getDuration() > 0) {
                 if (bossEntity != null)
-                    Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, () -> bossEntity.addTags(blueprint.getTags()), blueprint.getDuration());
+                    bossEntity.getLivingEntity().getScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> bossEntity.addTags(blueprint.getTags()), null, blueprint.getDuration());
                 if (targetEntity instanceof Player player && ElitePlayerInventory.getPlayer(player) != null)
-                    Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, () -> ElitePlayerInventory.getPlayer(player).addTags(blueprint.getTags()), blueprint.getDuration());
+                    player.getScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask) -> ElitePlayerInventory.getPlayer(player).addTags(blueprint.getTags()), null, blueprint.getDuration());
             }
         });
     }
@@ -664,7 +665,7 @@ public class ScriptAction {
 
             if (!blueprint.getLandingScripts().isEmpty()) {
                 FallingEntityDataPair fallingEntityDataPair = new FallingEntityDataPair(this, scriptActionData);
-                new BukkitRunnable() {
+                new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
                     int counter = 0;
 
                     @Override
@@ -678,7 +679,7 @@ public class ScriptAction {
                         if (counter > 20 * 60 * 5)
                             cancel();
                     }
-                }.runTaskTimer(MetadataHandler.PLUGIN, 1, 1);
+                }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
             }
         });
     }
@@ -703,12 +704,12 @@ public class ScriptAction {
         getTargets(scriptActionData).forEach(targetEntity -> {
             targetEntity.getAttribute(Attribute.GENERIC_SCALE).setBaseValue(blueprint.getScale());
             if (blueprint.getDuration() > 0)
-                new BukkitRunnable() {
+                new FoliaRunnable(targetEntity.getScheduler(), null) {
                     @Override
                     public void run() {
                         targetEntity.getAttribute(Attribute.GENERIC_SCALE).setBaseValue(1f);
                     }
-                }.runTaskLater(MetadataHandler.PLUGIN, blueprint.getDuration());
+                }.runDelayed(MetadataHandler.PLUGIN, blueprint.getDuration());
         });
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/scripts/ScriptZone.java b/src/main/java/com/magmaguy/elitemobs/powers/scripts/ScriptZone.java
index e066f334..1034dc8b 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/scripts/ScriptZone.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/scripts/ScriptZone.java
@@ -11,6 +11,7 @@ import com.magmaguy.elitemobs.powers.scripts.caching.ScriptTargetsBlueprint;
 import com.magmaguy.elitemobs.powers.scripts.caching.ScriptZoneBlueprint;
 import com.magmaguy.elitemobs.powers.scripts.enums.TargetType;
 import com.magmaguy.elitemobs.utils.EventCaller;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.shapes.*;
 import com.magmaguy.magmacore.util.Logger;
 import lombok.Getter;
@@ -56,7 +57,7 @@ public class ScriptZone {
         if (!zoneListener) return;
         entitiesInZone = new HashSet<>();
         ScriptActionData scriptActionData = new ScriptActionData(eliteEntity, targets, this);
-        new ZoneListenerTask(eliteEntity, scriptActionData).runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        new ZoneListenerTask(eliteEntity, scriptActionData).runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
     }
 
     public void ZoneEnterEvent(EliteEntity eliteEntity, LivingEntity livingEntity) {
@@ -241,11 +242,12 @@ public class ScriptZone {
         return entities;
     }
 
-    private class ZoneListenerTask extends BukkitRunnable {
+    private class ZoneListenerTask extends FoliaRunnable {
         private final EliteEntity eliteEntity;
         private final ScriptActionData scriptActionData;
 
         public ZoneListenerTask(EliteEntity eliteEntity, ScriptActionData scriptActionData) {
+            super(eliteEntity.getLivingEntity().getScheduler(), null);
             this.eliteEntity = eliteEntity;
             this.scriptActionData = scriptActionData;
         }
diff --git a/src/main/java/com/magmaguy/elitemobs/powers/specialpowers/EnderCrystalLightningRod.java b/src/main/java/com/magmaguy/elitemobs/powers/specialpowers/EnderCrystalLightningRod.java
index b90c2cc2..1fb15e94 100644
--- a/src/main/java/com/magmaguy/elitemobs/powers/specialpowers/EnderCrystalLightningRod.java
+++ b/src/main/java/com/magmaguy/elitemobs/powers/specialpowers/EnderCrystalLightningRod.java
@@ -3,6 +3,7 @@ package com.magmaguy.elitemobs.powers.specialpowers;
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
 import com.magmaguy.elitemobs.powers.EnderDragonEmpoweredLightning;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.NamespacedKey;
 import org.bukkit.entity.EnderCrystal;
 import org.bukkit.entity.EntityType;
@@ -18,7 +19,7 @@ import java.util.concurrent.ThreadLocalRandom;
 public class EnderCrystalLightningRod {
 
     public EnderCrystalLightningRod(EliteEntity eliteEntity, EnderCrystal enderCrystal) {
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
             int counter = 0;
 
             @Override
@@ -39,7 +40,7 @@ public class EnderCrystalLightningRod {
 
                 counter++;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 20);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 20);
     }
 
     public static class EnderCrystalLightningRodEvents implements Listener {
diff --git a/src/main/java/com/magmaguy/elitemobs/powerstances/VisualItemProcessor.java b/src/main/java/com/magmaguy/elitemobs/powerstances/VisualItemProcessor.java
index 9db21188..8a97948e 100644
--- a/src/main/java/com/magmaguy/elitemobs/powerstances/VisualItemProcessor.java
+++ b/src/main/java/com/magmaguy/elitemobs/powerstances/VisualItemProcessor.java
@@ -2,6 +2,7 @@ package com.magmaguy.elitemobs.powerstances;
 
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.mobconstructor.EliteEntity;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.Location;
 import org.bukkit.Particle;
 import org.bukkit.entity.Item;
@@ -39,7 +40,7 @@ public class VisualItemProcessor {
     private void rotateExistingEffects(Object[][] multiDimensionalTrailTracker, Vector[][] cachedVectorPositions,
                                        int pointsPerRotation, EliteEntity eliteEntity) {
 
-        new BukkitRunnable() {
+        new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
 
             final boolean isObfuscated = eliteEntity.isVisualEffectObfuscated();
             int counter = 0;
@@ -90,7 +91,7 @@ public class VisualItemProcessor {
                 if (isObfuscated != eliteEntity.isVisualEffectObfuscated()) {
                     VisualItemRemover.removeItems(multiDimensionalTrailTracker);
                     cancel();
-                    new BukkitRunnable() {
+                    new FoliaRunnable(eliteEntity.getLivingEntity().getScheduler(), null) {
                         @Override
                         public void run() {
                             eliteEntity.setVisualEffectObfuscated(false);
@@ -103,13 +104,13 @@ public class VisualItemProcessor {
                                 new MajorPowerPowerStance(eliteEntity);
                             }
                         }
-                    }.runTask(MetadataHandler.PLUGIN);
+                    }.run(MetadataHandler.PLUGIN);
 
                 }
 
             }
 
-        }.runTaskTimerAsynchronously(MetadataHandler.PLUGIN, 0, 5);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 5);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/powerstances/VisualItemRemover.java b/src/main/java/com/magmaguy/elitemobs/powerstances/VisualItemRemover.java
index 2a5a8a32..1bb8bce4 100644
--- a/src/main/java/com/magmaguy/elitemobs/powerstances/VisualItemRemover.java
+++ b/src/main/java/com/magmaguy/elitemobs/powerstances/VisualItemRemover.java
@@ -3,6 +3,7 @@ package com.magmaguy.elitemobs.powerstances;
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.api.internal.RemovalReason;
 import com.magmaguy.elitemobs.entitytracker.EntityTracker;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.entity.Item;
 import org.bukkit.scheduler.BukkitRunnable;
 
@@ -15,13 +16,13 @@ public class VisualItemRemover {
         for (Object[] objects : multiDimensionalTrailTracker)
             for (Object object : objects) {
                 if (!(object instanceof Item item)) continue;
-                new BukkitRunnable() {
+                new FoliaRunnable(item.getScheduler(), null) {
                     @Override
                     public void run() {
                         item.remove();
                         EntityTracker.unregister(item, RemovalReason.EFFECT_TIMEOUT);
                     }
-                }.runTask(MetadataHandler.PLUGIN);
+                }.run(MetadataHandler.PLUGIN);
             }
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/quests/DynamicQuest.java b/src/main/java/com/magmaguy/elitemobs/quests/DynamicQuest.java
index 82562590..f689bbbd 100644
--- a/src/main/java/com/magmaguy/elitemobs/quests/DynamicQuest.java
+++ b/src/main/java/com/magmaguy/elitemobs/quests/DynamicQuest.java
@@ -9,6 +9,9 @@ import com.magmaguy.elitemobs.playerdata.database.PlayerData;
 import com.magmaguy.elitemobs.quests.objectives.DynamicKillObjective;
 import com.magmaguy.elitemobs.quests.objectives.QuestObjectives;
 import com.magmaguy.elitemobs.quests.rewards.QuestReward;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
+import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.entity.Player;
 import org.bukkit.scheduler.BukkitRunnable;
@@ -22,7 +25,7 @@ public class DynamicQuest extends Quest {
 
     //These are generated fresh every hour
     private static final HashMap<Integer, List<QuestObjectives>> threeRandomDynamicObjectives = new HashMap<>();
-    private static BukkitTask randomizerTask;
+    private static ScheduledTask randomizerTask;
 
     public DynamicQuest(Player player, int questLevel, QuestObjectives questObjectives) {
         super(player, questObjectives, questLevel);
@@ -33,7 +36,7 @@ public class DynamicQuest extends Quest {
     }
 
     public static void startRandomizingQuests() {
-        randomizerTask = new BukkitRunnable() {
+        randomizerTask = new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             @Override
             public void run() {
                 for (int activeLevel = 1; activeLevel < 21; activeLevel++) {
@@ -44,7 +47,7 @@ public class DynamicQuest extends Quest {
                     threeRandomDynamicObjectives.put(activeLevel, questObjectives);
                 }
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 20 * 60L);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 20 * 60L);
     }
 
     public static void shutdown() {
diff --git a/src/main/java/com/magmaguy/elitemobs/quests/QuestInteractionHandler.java b/src/main/java/com/magmaguy/elitemobs/quests/QuestInteractionHandler.java
index 23223285..7b20543b 100644
--- a/src/main/java/com/magmaguy/elitemobs/quests/QuestInteractionHandler.java
+++ b/src/main/java/com/magmaguy/elitemobs/quests/QuestInteractionHandler.java
@@ -7,6 +7,7 @@ import com.magmaguy.elitemobs.playerdata.database.PlayerData;
 import com.magmaguy.elitemobs.quests.menus.QuestMenu;
 import com.magmaguy.elitemobs.quests.objectives.CustomFetchObjective;
 import com.magmaguy.elitemobs.quests.objectives.Objective;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import org.bukkit.entity.Player;
 import org.bukkit.scheduler.BukkitRunnable;
 
@@ -70,12 +71,12 @@ public class QuestInteractionHandler {
             player.sendMessage(QuestsConfig.getQuestPrerequisitesMissingMessage());
 
         if (!customQuestList.isEmpty())
-            new BukkitRunnable() {
+            new FoliaRunnable(player.getScheduler(), null) {
                 @Override
                 public void run() {
                     QuestMenu.generateCustomQuestMenu(customQuestList, player, npcEntity);
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, 1);
+            }.runDelayed(MetadataHandler.PLUGIN, 1);
     }
 
     private static void scanQuestTakerNPC(NPCEntity npcEntity, List<Quest> activeQuests, List<CustomQuest> npcQuests, Player player) {
diff --git a/src/main/java/com/magmaguy/elitemobs/quests/QuestTracking.java b/src/main/java/com/magmaguy/elitemobs/quests/QuestTracking.java
index 2b350027..651611d9 100644
--- a/src/main/java/com/magmaguy/elitemobs/quests/QuestTracking.java
+++ b/src/main/java/com/magmaguy/elitemobs/quests/QuestTracking.java
@@ -13,9 +13,11 @@ import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.playerdata.database.PlayerData;
 import com.magmaguy.elitemobs.quests.objectives.*;
 import com.magmaguy.elitemobs.treasurechest.TreasureChest;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.wormhole.Wormhole;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import com.magmaguy.magmacore.util.SpigotMessage;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import lombok.Getter;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
@@ -36,6 +38,7 @@ import org.bukkit.util.Vector;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.concurrent.TimeUnit;
 
 public class QuestTracking {
 
@@ -46,8 +49,8 @@ public class QuestTracking {
     private final CustomQuest customQuest;
     private final List<Location> turnInNPCs = new ArrayList<>();
     private List<ObjectiveDestinations> objectiveDestinations = new ArrayList<>();
-    private BukkitTask locationRefresher;
-    private BukkitTask compassTask;
+    private ScheduledTask locationRefresher;
+    private ScheduledTask compassTask;
     private BossBar compassBar;
     private boolean questIsDone = false;
 
@@ -95,7 +98,7 @@ public class QuestTracking {
     }
 
     private void startLocationGetter() {
-        locationRefresher = new BukkitRunnable() {
+        locationRefresher = new FoliaRunnable(Bukkit.getAsyncScheduler(), TimeUnit.MILLISECONDS) {
             @Override
             public void run() {
                 if (!player.isValid()) {
@@ -104,7 +107,7 @@ public class QuestTracking {
                 }
                 updateLocations(customQuest);
             }
-        }.runTaskTimerAsynchronously(MetadataHandler.PLUGIN, 0L, 20L * 60L);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1L, 20L * 60L * 50);
     }
 
     public void updateLocations(Quest quest) {
@@ -119,7 +122,7 @@ public class QuestTracking {
                         destinations.addAll(getDialogLocations((DialogObjective) objective));
                     else if (objective instanceof CustomFetchObjective)
                         destinations.addAll(getFetchLocations((CustomFetchObjective) objective));
-            Bukkit.getScheduler().runTask(MetadataHandler.PLUGIN, () -> objectiveDestinations = destinations);
+            Bukkit.getGlobalRegionScheduler().run(MetadataHandler.PLUGIN, (scheduledTask) -> objectiveDestinations = destinations);
         } else {
             questIsDone = true;
             getTurnInNPC();
@@ -181,12 +184,12 @@ public class QuestTracking {
 
     public void stop() {
         playerTrackingQuests.remove(player);
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             @Override
             public void run() {
                 player.setScoreboard(Bukkit.getScoreboardManager().getNewScoreboard());
             }
-        }.runTask(MetadataHandler.PLUGIN);
+        }.run(MetadataHandler.PLUGIN);
         locationRefresher.cancel();
         compassTask.cancel();
         compassBar.removeAll();
@@ -194,7 +197,7 @@ public class QuestTracking {
 
     private void startCompass() {
         compassBar = Bukkit.createBossBar("", BarColor.GREEN, BarStyle.SOLID, BarFlag.PLAY_BOSS_MUSIC);
-        compassTask = new BukkitRunnable() {
+        compassTask = new FoliaRunnable(player.getScheduler(), null) {
             @Override
             public void run() {
                 if (!player.isOnline()) {
@@ -203,7 +206,7 @@ public class QuestTracking {
                 }
                 updateCompassContents();
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0L, 1L);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1L, 1L);
     }
 
     private void updateCompassContents() {
diff --git a/src/main/java/com/magmaguy/elitemobs/quests/objectives/CustomFetchObjective.java b/src/main/java/com/magmaguy/elitemobs/quests/objectives/CustomFetchObjective.java
index 71e74af0..90856f54 100644
--- a/src/main/java/com/magmaguy/elitemobs/quests/objectives/CustomFetchObjective.java
+++ b/src/main/java/com/magmaguy/elitemobs/quests/objectives/CustomFetchObjective.java
@@ -9,6 +9,7 @@ import com.magmaguy.elitemobs.items.ItemTagger;
 import com.magmaguy.elitemobs.playerdata.database.PlayerData;
 import com.magmaguy.elitemobs.quests.Quest;
 import com.magmaguy.elitemobs.utils.EventCaller;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.Logger;
 import lombok.Getter;
 import lombok.Setter;
@@ -85,7 +86,7 @@ public class CustomFetchObjective extends Objective {
     @Override
     public void progressNonlinearObjective(QuestObjectives questObjectives, Player player) {
         CustomFetchObjective customFetchObjective = this;
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             @Override
             public void run() {
                 fullUpdate(player);
@@ -97,7 +98,7 @@ public class CustomFetchObjective extends Objective {
                         customFetchObjective);
                 new EventCaller(questProgressionEvent);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, 1);
+        }.runDelayed(MetadataHandler.PLUGIN, 1);
     }
 
     /**
diff --git a/src/main/java/com/magmaguy/elitemobs/quests/playercooldowns/QuestCooldown.java b/src/main/java/com/magmaguy/elitemobs/quests/playercooldowns/QuestCooldown.java
index 922d7452..3e9e1a02 100644
--- a/src/main/java/com/magmaguy/elitemobs/quests/playercooldowns/QuestCooldown.java
+++ b/src/main/java/com/magmaguy/elitemobs/quests/playercooldowns/QuestCooldown.java
@@ -2,6 +2,8 @@ package com.magmaguy.elitemobs.quests.playercooldowns;
 
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.playerdata.database.PlayerData;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import lombok.Getter;
 import org.bukkit.Bukkit;
 import org.bukkit.metadata.LazyMetadataValue;
@@ -20,7 +22,7 @@ public class QuestCooldown implements Serializable {
     @Getter
     private long targetUnixTime = 0;
     @Getter
-    private transient BukkitTask bukkitTask = null;
+    private transient ScheduledTask bukkitTask = null;
 
     public QuestCooldown(int delayInMinutes, String permission, UUID player) {
         this.permanent = delayInMinutes < 1;
@@ -40,7 +42,7 @@ public class QuestCooldown implements Serializable {
         permissionAttachment.setPermission(permission, true);
         Bukkit.getPlayer(player).setMetadata(permission, new LazyMetadataValue(MetadataHandler.PLUGIN, () -> true));
         if (!permanent)
-            bukkitTask = new BukkitRunnable() {
+            bukkitTask = new FoliaRunnable(Bukkit.getPlayer(player).getScheduler(), null) {
                 @Override
                 public void run() {
                     if (Bukkit.getPlayer(player) != null) {
@@ -49,7 +51,7 @@ public class QuestCooldown implements Serializable {
                         PlayerData.updatePlayerQuestCooldowns(player, PlayerData.getPlayerQuestCooldowns(player));
                     }
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, delay);
+            }.runDelayed(MetadataHandler.PLUGIN, delay);
     }
 
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/treasurechest/TreasureChest.java b/src/main/java/com/magmaguy/elitemobs/treasurechest/TreasureChest.java
index 122ef224..62fc4ba4 100644
--- a/src/main/java/com/magmaguy/elitemobs/treasurechest/TreasureChest.java
+++ b/src/main/java/com/magmaguy/elitemobs/treasurechest/TreasureChest.java
@@ -12,6 +12,7 @@ import com.magmaguy.elitemobs.mobconstructor.PersistentObject;
 import com.magmaguy.elitemobs.mobconstructor.PersistentObjectHandler;
 import com.magmaguy.elitemobs.mobconstructor.custombosses.CustomBossEntity;
 import com.magmaguy.elitemobs.utils.ConfigurationLocation;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.WeightedProbability;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import com.magmaguy.magmacore.util.Logger;
@@ -103,7 +104,7 @@ public class TreasureChest implements PersistentObject {
             if (time < 0)
                 generateChest();
             else
-                Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, this::generateChest, time);
+                Bukkit.getRegionScheduler().runDelayed(MetadataHandler.PLUGIN, location, scheduledTask -> generateChest(), time);
         }
     }
 
@@ -147,12 +148,12 @@ public class TreasureChest implements PersistentObject {
                 blacklistedPlayersInstance.add(player.getUniqueId());
             } else if (customTreasureChestConfigFields.getRestockTimers() != null) {
                 customTreasureChestConfigFields.getRestockTimers().add(cooldownStringConstructor(player));
-                new BukkitRunnable() {
+                new FoliaRunnable(player.getScheduler(), null) {
                     @Override
                     public void run() {
                         customTreasureChestConfigFields.getRestockTimers().removeIf(restockTime -> restockTime.split(":")[0].equals(player.getUniqueId().toString()));
                     }
-                }.runTaskLater(MetadataHandler.PLUGIN, 20L * 60 * customTreasureChestConfigFields.getRestockTimer());
+                }.runDelayed(MetadataHandler.PLUGIN, 20L * 60 * customTreasureChestConfigFields.getRestockTimer());
             }
             return;
         }
@@ -163,7 +164,7 @@ public class TreasureChest implements PersistentObject {
         customTreasureChestConfigFields.setRestockTime(location, restockTime);
 
         if (!customTreasureChestConfigFields.isInstanced())
-            Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, this::generateChest, 20L * 60 * customTreasureChestConfigFields.getRestockTimer());
+            Bukkit.getRegionScheduler().runDelayed(MetadataHandler.PLUGIN, location, scheduledTask -> generateChest(), 20L * 60 * customTreasureChestConfigFields.getRestockTimer());
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/utils/CooldownHandler.java b/src/main/java/com/magmaguy/elitemobs/utils/CooldownHandler.java
index 3a89b1c0..762ae5e2 100644
--- a/src/main/java/com/magmaguy/elitemobs/utils/CooldownHandler.java
+++ b/src/main/java/com/magmaguy/elitemobs/utils/CooldownHandler.java
@@ -1,6 +1,7 @@
 package com.magmaguy.elitemobs.utils;
 
 import com.magmaguy.elitemobs.MetadataHandler;
+import org.bukkit.Bukkit;
 import org.bukkit.scheduler.BukkitRunnable;
 
 import java.util.List;
@@ -12,12 +13,12 @@ public class CooldownHandler {
     public static void initialize(List list, Object object, int cooldownInTicks) {
         list.add(object);
 
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             @Override
             public void run() {
                 list.remove(object);
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, cooldownInTicks);
+        }.runDelayed(MetadataHandler.PLUGIN, cooldownInTicks);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/utils/DialogArmorStand.java b/src/main/java/com/magmaguy/elitemobs/utils/DialogArmorStand.java
index a1a88c2e..078eb5f6 100644
--- a/src/main/java/com/magmaguy/elitemobs/utils/DialogArmorStand.java
+++ b/src/main/java/com/magmaguy/elitemobs/utils/DialogArmorStand.java
@@ -18,7 +18,7 @@ public class DialogArmorStand {
         TextDisplay armorStand = VisualDisplay.generateTemporaryTextDisplay(sourceEntity.getLocation().clone().add(finalOffset), dialog);
 
         //This part is necessary because armorstands are visible on their first tick to players
-        new BukkitRunnable() {
+        new FoliaRunnable(sourceEntity.getScheduler(), null) {
             int taskTimer = 0;
 
             @Override
@@ -33,7 +33,7 @@ public class DialogArmorStand {
                 armorStand.teleport(sourceEntity.getLocation().clone().add(finalOffset).add(new Vector(0, taskTimer * 0.05, 0)));
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 2);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 2);
 
         return armorStand;
     }
@@ -51,7 +51,7 @@ public class DialogArmorStand {
 
         TextDisplay armorStand = VisualDisplay.generateTemporaryTextDisplay(sourceEntity.getLocation().clone().add(getDisplacementVector(sourceEntity)), dialog);
         //This part is necessary because armorstands are visible on their first tick to players
-        new BukkitRunnable() {
+        new FoliaRunnable(sourceEntity.getScheduler(), null) {
             int taskTimer = 0;
 
             @Override
@@ -64,7 +64,7 @@ public class DialogArmorStand {
                 armorStand.teleport(sourceEntity.getLocation().clone().add(getDisplacementVector(sourceEntity)));
                 taskTimer++;
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 1);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 1);
         return armorStand;
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/utils/ServerTime.java b/src/main/java/com/magmaguy/elitemobs/utils/ServerTime.java
index 6a9fe24d..252a8f49 100644
--- a/src/main/java/com/magmaguy/elitemobs/utils/ServerTime.java
+++ b/src/main/java/com/magmaguy/elitemobs/utils/ServerTime.java
@@ -12,6 +12,6 @@ public class ServerTime {
     }
 
     public static void startTickCounter() {
-        Bukkit.getScheduler().scheduleSyncRepeatingTask(MetadataHandler.PLUGIN, () -> time++, 0, 1);
+        Bukkit.getGlobalRegionScheduler().runAtFixedRate(MetadataHandler.PLUGIN, (scheduledTask) -> time++, 1, 1);
     }
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/utils/SimpleScoreboard.java b/src/main/java/com/magmaguy/elitemobs/utils/SimpleScoreboard.java
index e90fbc95..4f6fcaa6 100644
--- a/src/main/java/com/magmaguy/elitemobs/utils/SimpleScoreboard.java
+++ b/src/main/java/com/magmaguy/elitemobs/utils/SimpleScoreboard.java
@@ -30,13 +30,13 @@ public class SimpleScoreboard {
 
     public static Scoreboard temporaryScoreboard(Player player, String displayName, List<String> scoreboardContents, int ticksTimeout) {
         Scoreboard scoreboard = lazyScoreboard(player, displayName, scoreboardContents);
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             @Override
             public void run() {
                 if (player.getScoreboard().equals(scoreboard))
                     player.setScoreboard(Bukkit.getScoreboardManager().getNewScoreboard());
             }
-        }.runTaskLater(MetadataHandler.PLUGIN, ticksTimeout);
+        }.runDelayed(MetadataHandler.PLUGIN, ticksTimeout);
 
         return scoreboard;
     }
diff --git a/src/main/java/com/magmaguy/elitemobs/utils/StringColorAnimator.java b/src/main/java/com/magmaguy/elitemobs/utils/StringColorAnimator.java
index 2966af66..5cc60f46 100644
--- a/src/main/java/com/magmaguy/elitemobs/utils/StringColorAnimator.java
+++ b/src/main/java/com/magmaguy/elitemobs/utils/StringColorAnimator.java
@@ -15,7 +15,7 @@ public class StringColorAnimator {
         subtitle = ChatColor.stripColor(subtitle);
 
         String finalSubtitle = subtitle;
-        new BukkitRunnable() {
+        new FoliaRunnable(player.getScheduler(), null) {
             final int titleSize = title.length();
             final int subtitleSize = finalSubtitle.length();
             int counter = 0;
@@ -51,7 +51,7 @@ public class StringColorAnimator {
 
             }
 
-        }.runTaskTimer(MetadataHandler.PLUGIN, 0, 2);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 2);
 
     }
 
diff --git a/src/main/java/com/magmaguy/elitemobs/utils/shapes/RotatingRay.java b/src/main/java/com/magmaguy/elitemobs/utils/shapes/RotatingRay.java
index 3a91388a..a900210f 100644
--- a/src/main/java/com/magmaguy/elitemobs/utils/shapes/RotatingRay.java
+++ b/src/main/java/com/magmaguy/elitemobs/utils/shapes/RotatingRay.java
@@ -1,7 +1,9 @@
 package com.magmaguy.elitemobs.utils.shapes;
 
 import com.magmaguy.elitemobs.MetadataHandler;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.Lerp;
+import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.scheduler.BukkitRunnable;
 import org.bukkit.util.Vector;
@@ -61,7 +63,7 @@ public class RotatingRay extends Ray {
         double singleTickPitchRotation = pitchRotation != 0 ? pitchRotation / totalTickDuration : 0;
         double singleTickYawRotation = yawRotation != 0 ? yawRotation / totalTickDuration : 0;
         Vector perpendicularVector = raySegment.clone().setY(0).normalize().rotateAroundY(Math.toRadians(90));
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             private int counter = 1;
 
             @Override
@@ -81,7 +83,7 @@ public class RotatingRay extends Ray {
                     raySegment.rotateAroundY(Math.toRadians(singleTickYawRotation));
                 locations = drawLine();
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 1L, 1L);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1L, 1L);
     }
 
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/utils/shapes/TranslatingRay.java b/src/main/java/com/magmaguy/elitemobs/utils/shapes/TranslatingRay.java
index 656c89be..848514d6 100644
--- a/src/main/java/com/magmaguy/elitemobs/utils/shapes/TranslatingRay.java
+++ b/src/main/java/com/magmaguy/elitemobs/utils/shapes/TranslatingRay.java
@@ -1,7 +1,9 @@
 package com.magmaguy.elitemobs.utils.shapes;
 
 import com.magmaguy.elitemobs.MetadataHandler;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.elitemobs.utils.Lerp;
+import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.scheduler.BukkitRunnable;
 
@@ -26,7 +28,7 @@ public class TranslatingRay extends Ray {
                                 Location startLocation2,
                                 Location endLocation2,
                                 int animationDuration) {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getGlobalRegionScheduler()) {
             int counter = 0;
 
             @Override
@@ -40,6 +42,6 @@ public class TranslatingRay extends Ray {
                         Lerp.lerpLocation(startLocation1, endLocation1, counter / (double) animationDuration),
                         Lerp.lerpLocation(startLocation2, endLocation2, counter / (double) animationDuration));
             }
-        }.runTaskTimer(MetadataHandler.PLUGIN, 1L, 1L);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1L, 1L);
     }
 }
diff --git a/src/main/java/com/magmaguy/elitemobs/versionnotifier/VersionChecker.java b/src/main/java/com/magmaguy/elitemobs/versionnotifier/VersionChecker.java
index 01c35ca9..3c3c5f6d 100644
--- a/src/main/java/com/magmaguy/elitemobs/versionnotifier/VersionChecker.java
+++ b/src/main/java/com/magmaguy/elitemobs/versionnotifier/VersionChecker.java
@@ -3,6 +3,7 @@ package com.magmaguy.elitemobs.versionnotifier;
 import com.magmaguy.elitemobs.MetadataHandler;
 import com.magmaguy.elitemobs.dungeons.EMPackage;
 import com.magmaguy.elitemobs.utils.DiscordLinks;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import com.magmaguy.magmacore.util.Logger;
 import com.magmaguy.magmacore.util.SpigotMessage;
@@ -57,7 +58,7 @@ public class VersionChecker {
     }
 
     private static void checkPluginVersion() {
-        new BukkitRunnable() {
+        new FoliaRunnable(Bukkit.getAsyncScheduler(), null) {
             @Override
             public void run() {
                 String currentVersion = MetadataHandler.PLUGIN.getDescription().getVersion();
@@ -104,11 +105,11 @@ public class VersionChecker {
 
                 pluginIsUpToDate = true;
             }
-        }.runTaskAsynchronously(MetadataHandler.PLUGIN);
+        }.run(MetadataHandler.PLUGIN);
     }
 
     private static void checkDungeonVersions() {
-        Bukkit.getScheduler().runTaskAsynchronously(MetadataHandler.PLUGIN, () -> {
+        Bukkit.getAsyncScheduler().runNow(MetadataHandler.PLUGIN, (scheduledTask) -> {
             outdatedPackages.clear();
             for (EMPackage emPackage : EMPackage.getEmPackages().values()) {
                 if (emPackage.isInstalled()) {
@@ -157,7 +158,7 @@ public class VersionChecker {
 
             if (!event.getPlayer().hasPermission("elitemobs.versionnotification")) return;
 
-            new BukkitRunnable() {
+            new FoliaRunnable(event.getPlayer().getScheduler(), null) {
                 @Override
                 public void run() {
                     if (!event.getPlayer().isOnline()) return;
@@ -189,7 +190,7 @@ public class VersionChecker {
                         event.getPlayer().sendMessage(ChatColorConverter.convert("&8[EliteMobs] &cThe EliteMobs resource pack has updated! This means that the current resource pack will not fully work until you restart your server. You only need to restart once!"));
                     }
                 }
-            }.runTaskLater(MetadataHandler.PLUGIN, 20L * 3);
+            }.runDelayed(MetadataHandler.PLUGIN, 20L * 3);
 
         }
     }
diff --git a/src/main/java/com/magmaguy/elitemobs/wormhole/WormholeEntry.java b/src/main/java/com/magmaguy/elitemobs/wormhole/WormholeEntry.java
index 3399255e..2718a5c6 100644
--- a/src/main/java/com/magmaguy/elitemobs/wormhole/WormholeEntry.java
+++ b/src/main/java/com/magmaguy/elitemobs/wormhole/WormholeEntry.java
@@ -10,6 +10,7 @@ import com.magmaguy.elitemobs.utils.ConfigurationLocation;
 import com.magmaguy.elitemobs.utils.DiscordLinks;
 import com.magmaguy.magmacore.util.ChatColorConverter;
 import com.magmaguy.magmacore.util.Logger;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import lombok.Getter;
 import lombok.Setter;
 import org.bukkit.Location;
@@ -37,7 +38,7 @@ public class WormholeEntry implements PersistentObject {
     private String armorStandText;
     @Getter
     @Setter
-    private BukkitTask wormholeTask;
+    private ScheduledTask wormholeTask;
     @Getter
     @Setter
     private ArmorStand text = null;
diff --git a/src/main/java/com/magmaguy/elitemobs/wormhole/WormholeTask.java b/src/main/java/com/magmaguy/elitemobs/wormhole/WormholeTask.java
index 54403879..6b69fa57 100644
--- a/src/main/java/com/magmaguy/elitemobs/wormhole/WormholeTask.java
+++ b/src/main/java/com/magmaguy/elitemobs/wormhole/WormholeTask.java
@@ -6,7 +6,9 @@ import com.magmaguy.elitemobs.config.WormholesConfig;
 import com.magmaguy.elitemobs.economy.EconomyHandler;
 import com.magmaguy.elitemobs.quests.playercooldowns.PlayerQuestCooldowns;
 import com.magmaguy.elitemobs.utils.ChunkLocationChecker;
+import com.magmaguy.elitemobs.utils.FoliaRunnable;
 import com.magmaguy.magmacore.util.ChatColorConverter;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Particle;
@@ -20,26 +22,27 @@ import org.bukkit.util.Vector;
 
 import java.util.HashSet;
 import java.util.Objects;
+import java.util.concurrent.TimeUnit;
 
 public class WormholeTask {
     private WormholeTask() {
     }
 
-    public static BukkitTask startWormholeTask(WormholeEntry wormholeEntry) {
+    public static ScheduledTask startWormholeTask(WormholeEntry wormholeEntry) {
         HashSet<Player> teleportingPlayers = new HashSet<>();
-        return new BukkitRunnable() {
+        return new FoliaRunnable(Bukkit.getAsyncScheduler(), TimeUnit.MILLISECONDS) {
             int counter = 0;
 
             @Override
             public void run() {
                 if (!ChunkLocationChecker.locationIsLoaded(wormholeEntry.getLocation())) {
                     if (wormholeEntry.getText() != null)
-                        new BukkitRunnable() {
+                        new FoliaRunnable(wormholeEntry.getText().getScheduler(), null) {
                             @Override
                             public void run() {
                                 wormholeEntry.getText().remove();
                             }
-                        }.runTask(MetadataHandler.PLUGIN);
+                        }.run(MetadataHandler.PLUGIN);
                     cancel();
                     return;
                 }
@@ -61,7 +64,7 @@ public class WormholeTask {
                     counter++;
                 }
             }
-        }.runTaskTimerAsynchronously(MetadataHandler.PLUGIN, 0, 5);
+        }.runAtFixedRate(MetadataHandler.PLUGIN, 1, 5 * 50);
 
     }
 
@@ -103,7 +106,7 @@ public class WormholeTask {
             }
             return;
         }
-        Bukkit.getScheduler().runTask(MetadataHandler.PLUGIN, () -> {
+        player.getScheduler().run(MetadataHandler.PLUGIN, (scheduledTask) -> {
             if (wormholeEntry.getWormhole().getWormholeConfigFields().isBlindPlayer())
                 player.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS, 20 * 2, 0));
             player.teleport(destination);
@@ -111,8 +114,8 @@ public class WormholeTask {
             player.setVelocity(destination.getDirection().normalize());
             player.setFlying(false);
             Wormhole.getPlayerCooldowns().add(player);
-            Bukkit.getScheduler().scheduleSyncDelayedTask(MetadataHandler.PLUGIN, () -> Wormhole.getPlayerCooldowns().remove(player), 20 * 10L);
-        });
+            player.getScheduler().runDelayed(MetadataHandler.PLUGIN, (scheduledTask1) -> Wormhole.getPlayerCooldowns().remove(player),  null, 20 * 10L);
+        }, null);
 
     }
 
-- 
2.45.1.windows.1

